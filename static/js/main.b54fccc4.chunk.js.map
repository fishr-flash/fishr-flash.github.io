{"version":3,"sources":["constants.js","reducers/utils.js","reducers/index.js","serviceWorker.js","reducers/servants/servantOnSign.js","reducers/servants/servantClickNumber.js","reducers/servants/servantOnDot.js","reducers/servants/servantSimpleOperator.js","reducers/servants/servantResult.js","reducers/servants/servantMain.js","reducers/servants/servantComplexes.js","reducers/servants/servantPercentOperator.js","reducers/servants/servantMemory.js","reducers/servants/servantMemoryList.js","calculator/Header.js","calculator/Output.js","calculator/input_btns/NumsBoard.js","calculator/input_btns/SimpleOperators.js","calculator/input_btns/BtnResult.js","calculator/input_btns/BtnPercent.js","calculator/input_btns/MainBtns.js","calculator/input_btns/MemoryBtns.js","calculator/input_btns/ComplexesBtns.js","calculator/Input.js","calculator/memory_screen/MemoryEntity.js","calculator/memory_screen/MemoryScreen.js","App.js","index.js"],"names":["ON_CLICK_NUMBER","ON_CLICK_DOT","ON_CLICK_SIGN","ON_CLICK_SIMPLE_OPERATOR","ON_CLICK_RESULT","ON_CLICK_MAIN","ON_CLICK_COMPLEXES","ON_CLICK_MEMORY","ON_CLICK_MEMORY_LIST","ON_CLICK_PERCENT","SIMPLE_MINUS","SIMPLE_PLUS","SIMPLE_MULTIPLY","SIMPLE_DIVISION","SIMPLE_RESULT","NOT_OPERATOR","MAIN_BACKSPACE","MAIN_CLEAR","MAIN_CLEAR_LAST","COMPLEXES_DIVISION_X","COMPLEXES_SQR_X","COMPLEXES_SQRT_X","DIVISION_BY_ZERO_IS_NOT_POSSIBLE","NOTHING_IS_SAVED_IN_MEMORY","MAX_LENGTH_INPUT_DIGITS","WIDTH_OUTPUT_WINDOW","FONT_SIZE_OUTPUT_WINDOW","MEMORY_CLEAR","MEMORY_READ","MEMORY_PLUS","MEMORY_MINUS","MEMORY_SAVE","MEMORY_LIST","MEMORY_LIST_ON_CLOSE","ON_MEMORY_LIST_CLEAR","ON_CLICK_MEMORY_ELEMENT","MEMORY_ELEMENT_CLEAR","MEMORY_ELEMENT_PLUS","MEMORY_ELEMENT_MINUS","MODES","BEGIN_MODE","FIRST_OPERATOR","MULTIPLE_ACTION","LAST_NUMBER","AFTER_RESULT","getArrLogText","args","arr","flatDeep","map","v","wasWrapped","toDisplayText","getSimpleOperator","filter","toFloat","displayText","roundNum","parseFloat","replace","nm","toString","operator","o","getResult","firstNumber","lastNumber","firstOperator","result","toFixed","getOutput","base","arg","dot","includesDot","includes","length","wrapperArg","expression","wrapText","trim","d","Infinity","reduce","acc","val","concat","Array","isArray","slice","argumentOfWrap","argWrap","verificationNumber","updateArrLogText","arrLog","firstArgument","secondArgument","pop","getComplexesAttributes","typeOperation","attributes","cOperation","Math","pow","sqrt","Error","undefined","isNaN","indexOf","formatDisplayText","parts","split","onMinus","parseInt","len","abs","i","invert","reverse","join","store","mode","onDot","percentNumber","NaN","divisionByZeroBlocking","memoryListOnOpen","arrMemory","arrLogText","numberIsWrapped","reducer","state","action","type","servantResult","servantMain","servantOnDot","servantOnSign","servantClickNumber","servantSimpleOperator","servantComplexes","servantPercentOperator","servantMemory","servantMemoryList","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","value","firstPart","selectedNumber","push","die","splice","id","Header","className","disabled","connect","rawText","logText","outputBlock","React","createRef","useState","rightOffset","setRightOffset","right","textAlign","spanStyle","setSpanStyle","onManualShift","setOnManualShift","logPWidth","setLogPWidth","logSpanWidth","setLogSpanWidth","arrowLeft","setArrowLeft","arrowRight","setArrowRight","useEffect","outputSpan","current","children","firstChild","parentP","offsetWidth","fontSize","style","substr","nextSize","ceil","textContent","logSpan","logP","parentNode","width","visibility","clickArrow","dirRight","rOffset","ref","onClick","dispatch","clickNumber","clickSymbol","props","memoryEngaged","Input","MemoryEntity","onClickElement","butsVisible","setButsVisible","ids","onClickBtn","e","target","buttons","key","onMouseOver","onMouseOut","memList","mockOfBlankScreen","marginTop","setMarginTop","title","App","role","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b54fccc4.chunk.js","sourcesContent":["/// action names\r\nexport const ON_CLICK_NUMBER = \"onClickNumber\";\r\nexport const ON_CLICK_DOT = \"onClickDot\";\r\nexport const ON_CLICK_SIGN = \"onClickSign\";\r\nexport const ON_CLICK_SIMPLE_OPERATOR = \"onClickSimpleOperator\";\r\nexport const ON_CLICK_RESULT = \"onClickResult\";\r\nexport const ON_CLICK_MAIN = \"onClickMain\";\r\nexport const ON_CLICK_COMPLEXES = \"onClickComplexes\";\r\nexport const ON_CLICK_MEMORY = \"onClickMemory\";\r\nexport const ON_CLICK_MEMORY_LIST = \"onClickMemoryList\";\r\nexport const ON_CLICK_PERCENT = \"onClickPercent\";\r\n\r\n\r\n/// simple operators\r\nexport const SIMPLE_MINUS = \"simpleMinus\";\r\nexport const SIMPLE_PLUS = \"simplePlus\";\r\nexport const SIMPLE_MULTIPLY = \"simpleMultiply\";\r\nexport const SIMPLE_DIVISION = \"simpleDivision\";\r\nexport const SIMPLE_RESULT = \"simpleResult\";\r\n\r\n/// default value of the firstOperator var\r\nexport const NOT_OPERATOR = \"notOperator\";\r\n\r\n\r\n\r\n/// main operators\r\nexport const MAIN_BACKSPACE = \"mainBackspace\";\r\nexport const MAIN_CLEAR = \"mainClear\";\r\nexport const MAIN_CLEAR_LAST = \"mainClearLast\";\r\n\r\n/// complexes operators\r\nexport const COMPLEXES_DIVISION_X = \"complexesDivisionX\";\r\nexport const COMPLEXES_SQR_X = \"complexesSqrX\";\r\nexport const COMPLEXES_SQRT_X = \"complexesSqrtX\";\r\n\r\n\r\nexport const DIVISION_BY_ZERO_IS_NOT_POSSIBLE = \"Деление на ноль невозможно\";\r\n///TODO: Сообщение выводится при попытки вставки некорректного номера, напр. текста\r\nexport const INVALID_DATA_ENTERED = \"Введены неверные данные\";\r\n///TODO: Обработать значение infinity напр. 1234567890123456 * х2 * х2...\r\nexport const VALUE_IS_OVERFLOW = \"Переполнение\";\r\nexport const NOTHING_IS_SAVED_IN_MEMORY = 'В памяти ничего не сохранено.'\r\nexport const MAX_LENGTH_INPUT_DIGITS = 16;\r\nexport const WIDTH_OUTPUT_WINDOW = 280;\r\nexport const FONT_SIZE_OUTPUT_WINDOW = 50;\r\n\r\n\r\n/// memory operators\r\nexport const MEMORY_CLEAR = 'memoryClear';\r\nexport const MEMORY_READ = 'memoryRead';\r\nexport const MEMORY_PLUS = 'memoryPlus';\r\nexport const MEMORY_MINUS = 'memoryMinus';\r\nexport const MEMORY_SAVE = 'memorySave';\r\n/// memory list operations\r\nexport const MEMORY_LIST = 'memoryList';\r\nexport const MEMORY_LIST_ON_CLOSE = 'memoryListOnClose';\r\nexport const ON_MEMORY_LIST_CLEAR = 'onMemoryListClear';\r\nexport const ON_CLICK_MEMORY_ELEMENT = 'onClickMemoryElement';\r\n\r\nexport const MEMORY_ELEMENT_CLEAR = 'memoryElementClear';\r\nexport const MEMORY_ELEMENT_PLUS = 'memoryElementPlus';\r\nexport const MEMORY_ELEMENT_MINUS = 'memoryElementMinus';\r\n\r\n\r\n\r\n/// modes set\r\n\r\nexport const MODES = {\r\n    BEGIN_MODE: 0\r\n    , FIRST_OPERATOR: 1\r\n    , MULTIPLE_ACTION: 2\r\n    , LAST_NUMBER: 3\r\n    , AFTER_RESULT: 4\r\n}\r\n\r\n","import {\r\n    COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X, MAX_LENGTH_INPUT_DIGITS,\r\n    SIMPLE_DIVISION,\r\n    SIMPLE_MINUS,\r\n    SIMPLE_MULTIPLY,\r\n    SIMPLE_PLUS,\r\n    SIMPLE_RESULT\r\n} from \"../constants\";\r\n\r\nexport const getArrLogText = ( ...args ) =>{\r\n\r\n    let arr = flatDeep( args ).map( v => {\r\n        let res =\"\";\r\n        if( typeof v === \"number\" || wasWrapped( v ) )\r\n            res = toDisplayText( v );\r\n        else\r\n            res = getSimpleOperator( v );\r\n        if( res ) return res;\r\n        return v;\r\n    });\r\n\r\n    return arr.filter( v => v !== \"\" );\r\n};\r\n\r\nexport const toFloat = (displayText )=> {\r\n    return roundNum( parseFloat(  displayText.replace( \",\", '.')) );\r\n};\r\n\r\nexport const toDisplayText = ( nm )=>{\r\n\r\n    return nm.toString().replace( \".\", \",\");\r\n};\r\nexport const getSimpleOperator = (operator )=>{\r\n\r\n    let o = '';\r\n    switch ( operator ) {\r\n        case SIMPLE_RESULT:\r\n            o = \"=\";\r\n            break;\r\n        case SIMPLE_PLUS:\r\n            o = \"+\";\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            o = \"-\";\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            o = \"×\";\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            o = \"÷\";\r\n            break;\r\n        default:\r\n            o = \"\";\r\n    }\r\n\r\n    return o;\r\n};\r\n\r\nexport const getResult = (  firstNumber, lastNumber, firstOperator ) =>{\r\n\r\n    let result = 0;\r\n    switch ( firstOperator ) {\r\n\r\n        case SIMPLE_PLUS:\r\n            result = roundNum( firstNumber + lastNumber );\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            result = roundNum( firstNumber - lastNumber );\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            result = roundNum( firstNumber * lastNumber );\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            result = roundNum( firstNumber / lastNumber );\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return result.toString().replace( \".\", \",\");\r\n};\r\n\r\nexport const roundNum = (nm )=>{\r\n    return nm.toFixed( 17 ) * 1 /* exclude excess zeros*/;\r\n};\r\n/**\r\n * Prepares a number for output in the main current number field\r\n *\r\n * @param base - perhaps the first part of the number ( before the separator )\r\n * @param arg - enter digit\r\n * @param dot - separator flag\r\n * @returns {string} the result is in string format\r\n */\r\nexport const getOutput = ( base, arg, dot = false ) =>{\r\n\r\n    let includesDot = false;\r\n    if( base.includes( \",\" )  ) {\r\n        dot = false;\r\n        includesDot = true;\r\n    }\r\n    if( includesDot && base.length === MAX_LENGTH_INPUT_DIGITS + 1)\r\n                    return base;\r\n    else if(  !includesDot && base.length === MAX_LENGTH_INPUT_DIGITS )\r\n                    return  base;\r\n    if( dot )\r\n        return  arg.toString() ?`${ base.toString() },${ arg }` : base;\r\n    else\r\n        return  base === '0' ? `${ arg}` : arg.toString() ? `${base}${arg}` : `${ base }`;\r\n};\r\n\r\n\r\n/**\r\n *  Called when it is necessary to wrap a number in the text\r\n *  of the calculator log in any special text structure,\r\n *  such \"wrapping\" can be multiple\r\n *\r\n *  Вызывается при необходимости обернуть число в тексте лога\r\n *  калькулятора в какую либо специальную текстовую контструкцию,\r\n *  такое \"обертывание\" может быть множественным\r\n * @param expression a string expression (ex 'negate( xx )' ) or a number\r\n  * @param wrapText\r\n * @returns {string}\r\n */\r\nexport const wrapperArg = ( expression, wrapText ) => `${wrapText}( ${ toDisplayText( expression ).trim() } )`;\r\n\r\nexport const flatDeep = ( arr, d = Infinity )=>{\r\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\r\n        : arr.slice();\r\n};\r\n\r\n/**\r\n *\r\n * @param argWrap commonly arrLogText[ 0 ]\r\n * @param verificationNumber\r\n * @returns {*} String\r\n */\r\nexport const argumentOfWrap =  (argWrap, verificationNumber ) => wasWrapped( argWrap ) ? argWrap : toDisplayText( verificationNumber );\r\n\r\n\r\n/**\r\n * Анализирует последнюю ячейку массива лога, если кол-во ячеек нечетное,\r\n * то в последней ячейке содержится либо число, либо \"обернутое\" выражение,\r\n * тогда она извлекается из массива, оборачивается в требуемое выражение\r\n * и затем включается в последовательность лога. Иначе, если последняя часть\r\n * массива лога - оператор ( +, -... ), в последовательность лога включается\r\n * сообщенный второй аргумент, чаще всего это число из переменной firstNumber или\r\n * lastNumber\r\n *\r\n * @param arrLog\r\n * @param nm\r\n * @param wrapText\r\n */\r\nexport const updateArrLogText = ( arrLog, nm, wrapText )=>{\r\n\r\n    let firstArgument = '';\r\n    let secondArgument = '';\r\n\r\n    if( arrLog.length > 1 && arrLog.length%2 ){\r\n        firstArgument = arrLog.slice( 0, -1 );\r\n        secondArgument = wrapperArg( arrLog.pop(), wrapText );\r\n    } else {\r\n        firstArgument = arrLog;\r\n        secondArgument = wrapperArg( toDisplayText( nm ), wrapText );\r\n    }\r\n\r\n    return getArrLogText( firstArgument, secondArgument );\r\n\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param typeOperation\r\n * @returns {{cOperation: (function(*): number), wrapText: string}}\r\n */\r\nexport const getComplexesAttributes = (typeOperation )=>{\r\n    let attributes = {};\r\n\r\n    switch ( typeOperation ) {\r\n        case COMPLEXES_DIVISION_X:\r\n            attributes = { cOperation: ( val )=> 1/val, wrapText: '1/' };\r\n            break;\r\n        case COMPLEXES_SQR_X:\r\n            attributes = { cOperation: ( val )=> Math.pow( val, 2 ), wrapText: 'sqr' };\r\n            break;\r\n        case COMPLEXES_SQRT_X:\r\n            attributes = { cOperation: ( val )=> Math.sqrt( val ), wrapText: '√' };\r\n            break;\r\n        default:\r\n            throw Error( 'Unknown typeOperation received');\r\n    }\r\n\r\n    return attributes;\r\n\r\n\r\n};\r\n\r\nexport const wasWrapped = ( expression )=>{\r\n    const operators = [ '+'\r\n                        , '-'\r\n                        , '×'\r\n                        , '÷'\r\n                        , '='\r\n                        , 'simpleMinus'\r\n                        , 'simplePlus'\r\n                        , 'simpleMultiply'\r\n                        , 'simpleDivision'\r\n                        , 'simpleResult'\r\n                        ];\r\n    return expression !== undefined && isNaN( expression ) && operators.indexOf( expression ) === - 1;\r\n};\r\n\r\n/**\r\n *  For Output.js input element of outputWindow name\r\n * @param displayText\r\n * @returns {string}\r\n */\r\nexport const formatDisplayText = ( displayText )=>{\r\n\r\n    const parts = displayText.split( ',');\r\n    if( isNaN( parts[ 0 ] ))\r\n        throw new Error( \"Received data is not number\");\r\n\r\n    let onMinus = false;\r\n\r\n    if( parseInt( parts[ 0 ] ) < 0 ){\r\n        onMinus = true;\r\n        parts[ 0 ] = parts[ 0 ].slice( 1 );\r\n    }\r\n\r\n\r\n    const len = parts[ 0 ].length;\r\n    let abs = \"\";\r\n\r\n    for (let i = len -1; i >= 0; i--) {\r\n        abs += ( len - i )%3?parts[ 0 ][ i ]: `${ parts[ 0 ][ i ] } `;\r\n    }\r\n\r\n    const invert = abs.split('').reverse();\r\n    parts[ 0 ] = invert.join('').trim();\r\n\r\n    return `${ onMinus? \"-\": ''}${parts.join(\",\")}`;\r\n\r\n\r\n\r\n};\r\n","import {\r\n    MODES,\r\n    NOT_OPERATOR,\r\n    ON_CLICK_COMPLEXES,\r\n    ON_CLICK_DOT,\r\n    ON_CLICK_MAIN, ON_CLICK_MEMORY, ON_CLICK_MEMORY_ELEMENT, ON_CLICK_MEMORY_LIST,\r\n    ON_CLICK_NUMBER,\r\n    ON_CLICK_PERCENT,\r\n    ON_CLICK_RESULT,\r\n    ON_CLICK_SIGN,\r\n    ON_CLICK_SIMPLE_OPERATOR\r\n} from \"../constants\";\r\nimport servantOnSign from \"./servants/servantOnSign\";\r\nimport servantClickNumber from \"./servants/servantClickNumber\";\r\nimport servantOnDot from \"./servants/servantOnDot\";\r\nimport servantSimpleOperator from \"./servants/servantSimpleOperator\";\r\nimport servantResult from \"./servants/servantResult\";\r\nimport servantMain from \"./servants/servantMain\";\r\nimport servantComplexes from \"./servants/servantComplexes\";\r\nimport servantPercentOperator from \"./servants/servantPercentOperator\";\r\nimport servantMemory from \"./servants/servantMemory\";\r\nimport servantMemoryList from \"./servants/servantMemoryList\";\r\n\r\n// export default combineReducers({ setNumber });\r\n\r\nexport const store = {\r\n     displayText: '0'\r\n    , firstNumber: 0\r\n    , lastNumber: 0\r\n    , mode: MODES.BEGIN_MODE\r\n    , firstOperator: NOT_OPERATOR\r\n    , onDot: false\r\n    , percentNumber: NaN\r\n    , divisionByZeroBlocking: false\r\n    , memoryListOnOpen: false\r\n    , arrMemory: []\r\n    , arrLogText: []\r\n    , numberIsWrapped: false\r\n\r\n};\r\n\r\nexport default function reducer ( state = store, action ) {\r\n\r\n    if ( state.divisionByZeroBlocking ) state = { ...store };\r\n\r\n    // значение divisionByZeroBlocking устанавливается только в servantResult, по нему\r\n    // ориентируются только веб элементы меняя состояние disabled, нажатие любой активной\r\n    // кнопки меняет состояние divisionByZeroBlocking на false, никакие servant'ы, кроме\r\n    // servantResult, не используют его значение, поэтому в них не передается\r\n    state.divisionByZeroBlocking = false;\r\n\r\n    switch ( action.type ) {\r\n        case ON_CLICK_RESULT:\r\n            state = servantResult( state );\r\n            break;\r\n        case ON_CLICK_MAIN:\r\n            state = servantMain( state, action );\r\n            break;\r\n        case ON_CLICK_DOT:\r\n            state = servantOnDot( state );\r\n            break;\r\n        case ON_CLICK_SIGN:\r\n            state = servantOnSign( state );\r\n           break;\r\n        case ON_CLICK_NUMBER:\r\n            state = servantClickNumber( state, action );\r\n            break;\r\n        case ON_CLICK_SIMPLE_OPERATOR:\r\n            state = servantSimpleOperator( state, action );\r\n            break;\r\n        case ON_CLICK_COMPLEXES:\r\n            state = servantComplexes( state, action );\r\n            break;\r\n        case ON_CLICK_PERCENT:\r\n            state = servantPercentOperator( state );\r\n            break;\r\n        case ON_CLICK_MEMORY:\r\n            state = servantMemory( state, action  );\r\n            break;\r\n\r\n        case ON_CLICK_MEMORY_LIST:\r\n        case ON_CLICK_MEMORY_ELEMENT:\r\n            state = servantMemoryList( state, action  );\r\n            break;\r\n        default:\r\n\r\n    }\r\n\r\n    ///TODO: Урезать кол-во параметров передаваемых в серванты, ограничив используемыми\r\n    ///TODO: Добавить экспоненциальный вывод после некоторого кол-ва разрядов 123456789013456+1234567890123456...\r\n    ///TODO: Добавить propTypes\r\n    /////////////////////////////CONSOLE/////////////////////////////////////\r\n        ///TODO: Console log in the code \"INDEX_JS\" line 32\r\n        if( process && process.env.NODE_ENV === 'development' ){\r\n            console.group( 'Console log in the code \"INDEX_JS\" line 32' );\r\n            //console.debug( 'state: ', state );\r\n            //console.debug( '( !buffer%1 ): ', ( !( buffer%1 ) ) );\r\n            console.table( state );\r\n            console.table( action );\r\n            console.info( 'process.env.NODE_ENV: ', process.env.NODE_ENV );\r\n            //console.debug( 'this: ', this );\r\n            console.groupEnd();\r\n        }\r\n    /////////////////////////////END CONSOLE/////////////////////////////////\r\n\r\n    return  state;\r\n\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, toDisplayText, toFloat, updateArrLogText, wrapperArg} from \"../utils\";\r\n\r\nexport default ( state )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , arrLogText\r\n    } = state;\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n        /// если в первой ячейке массива лога содержится выражение, напр 1/(10)\r\n        if( arrLogText[ 0 ] !== undefined && isNaN( arrLogText[ 0 ] ) ){\r\n            arrLogText = getArrLogText( wrapperArg( arrLogText[ 0 ], 'negate' ) );\r\n        }\r\n        firstNumber *= -1;\r\n        displayText = toDisplayText( firstNumber );\r\n        //percentNumber = firstNumber;\r\n        //arrLogText = [];\r\n    } else if( mode === MODES.FIRST_OPERATOR ) {\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n        lastNumber = firstNumber * -1;\r\n        arrLogText = getArrLogText(  firstNumber, firstOperator, wrapperArg( displayText, 'negate' ) );\r\n        displayText = toDisplayText( lastNumber );\r\n    } else if( mode === MODES.MULTIPLE_ACTION ) {\r\n        lastNumber = toFloat( displayText ) * -1;\r\n        arrLogText = updateArrLogText( arrLogText, displayText, 'negate');\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = toFloat( displayText ) * -1;\r\n\r\n        const expression = arrLogText.length > 1 ? displayText : arrLogText[ 0 ];\r\n        arrLogText = getArrLogText( ` ${ wrapperArg( expression, 'negate' ) } ` );\r\n        displayText = toDisplayText( firstNumber );\r\n    } else if( mode === MODES.LAST_NUMBER ) {\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, 'negate');\r\n        lastNumber *= -1;\r\n        displayText = toDisplayText( lastNumber );\r\n    }\r\n\r\n    return{ ...state\r\n            , displayText\r\n            , firstNumber\r\n            , lastNumber\r\n            , mode\r\n            , firstOperator\r\n            , arrLogText\r\n    };\r\n\r\n}","import {MODES, NOT_OPERATOR, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getOutput, toDisplayText, toFloat, wasWrapped} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ( state, action )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , numberIsWrapped\r\n    } = state;\r\n\r\n    const { value } = action;\r\n\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = value;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        arrLogText = store.arrLogText;\r\n        displayText = getOutput( '', value, onDot );\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR  ){\r\n        displayText = getOutput( lastNumber.toString(), value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.MULTIPLE_ACTION ){\r\n\r\n        // Нам нужно установить является ли число которое мы хотим поправить\r\n        // \"обернутым\", но мы не знаем что хранится в последней ячейке массива\r\n        // лога, ранее введенные цифры или знак арифм. действия ( если число только\r\n        // начало формироваться), зная, что операторы всегда хранятся в четных ячейках\r\n        // проверяем является ли последняя ячейка нечетной, если да - там хранится число\r\n        // которое можно проверять на \"обернутость\"\r\n        if( arrLogText.length%2 && isNaN( toFloat(  arrLogText[ arrLogText.length - 1] )) ){\r\n            lastNumber = value;\r\n            displayText =lastNumber.toString();\r\n            arrLogText = getArrLogText( arrLogText.slice( 0, -1 ) );\r\n        } else {\r\n            displayText = getOutput( lastNumber.toString(), value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.LAST_NUMBER ){\r\n        /// если к числу был применен сложный оператор\r\n        if(  numberIsWrapped ){\r\n\r\n            displayText = toDisplayText( value );\r\n            lastNumber = value;\r\n            if( wasWrapped( arrLogText[ arrLogText.length - 1] ) )\r\n                                                        arrLogText.pop();\r\n        }else{\r\n            displayText = getOutput( displayText, value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n    } else {\r\n        if( firstOperator === SIMPLE_RESULT ){\r\n            firstNumber = value;\r\n            displayText = toDisplayText( firstNumber );\r\n            firstOperator = NOT_OPERATOR;\r\n\r\n        } else {/// mode < MODES.FIRST_OPERATOR\r\n            /// если к числу был применен сложный оператор\r\n            if(  numberIsWrapped ){\r\n                displayText = toDisplayText( value );\r\n                firstNumber = value;\r\n\r\n            } else {\r\n                displayText = getOutput( displayText, value, onDot );\r\n                firstNumber = toFloat( displayText );\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ///FIXME: Везде отменить onDOT = false, флаг должен обнуляться только в местах изменения числа\r\n    onDot = false;\r\n    numberIsWrapped = false;\r\n\r\n    return{ ...state\r\n        ,displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ( state )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    } = state;\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        displayText = store.displayText;\r\n        firstNumber = store.firstNumber;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n        percentNumber = store.percentNumber;\r\n\r\n    }else if( mode === MODES.FIRST_OPERATOR || mode === MODES.MULTIPLE_ACTION ){\r\n        lastNumber = 0;\r\n        displayText = '0';\r\n        mode = MODES.LAST_NUMBER;\r\n    }\r\n\r\n    if( !displayText.includes( \",\" ) ){\r\n        onDot = true;\r\n        displayText = `${ displayText },`;\r\n    }\r\n\r\n\r\n    return{ ...state\r\n        , displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {argumentOfWrap, getArrLogText, getResult, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default (state , action )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , arrLogText\r\n    } = state;\r\n\r\n    const { value } = action;\r\n\r\n\r\n\r\n        if( mode < MODES.MULTIPLE_ACTION  ){\r\n            displayText = toDisplayText( firstNumber );\r\n\r\n                let firstPart = '';\r\n                /// если попеременно нажимаются разные операторы\r\n                if( mode === MODES.FIRST_OPERATOR && arrLogText.length ){\r\n                    firstPart = arrLogText.slice( 0, -1 ) ;\r\n                } else {\r\n                    // если первый аргумент есть и он обернут выражение\r\n                    firstPart = argumentOfWrap( arrLogText[ 0 ], firstNumber );\r\n\r\n                }\r\n\r\n            arrLogText = getArrLogText( firstPart\r\n                , value );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        } else if(   mode === MODES.AFTER_RESULT ){\r\n            /// когда после получения результата был нажат backspace лог удаляется\r\n            const selectedNumber = arrLogText.length ? argumentOfWrap( arrLogText[ 0 ], firstNumber ) : firstNumber;\r\n            arrLogText = getArrLogText( selectedNumber\r\n                , value );\r\n\r\n            mode = MODES.FIRST_OPERATOR;\r\n        } else if(  mode !== MODES.MULTIPLE_ACTION ){\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            firstNumber = toFloat( displayText );\r\n\r\n            if( mode === MODES.LAST_NUMBER ){\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                }\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, value);\r\n                mode = MODES.MULTIPLE_ACTION;\r\n            } else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , firstNumber\r\n                    , value\r\n                    , lastNumber\r\n                    , value );\r\n\r\n                mode = MODES.FIRST_OPERATOR;\r\n            }\r\n\r\n\r\n        }\r\n\r\n    return{ ...state\r\n        , displayText\r\n        , firstNumber\r\n        , lastNumber: 0\r\n        , mode\r\n        , onDot: false\r\n        , firstOperator: value\r\n        , percentNumber: firstNumber\r\n        , arrLogText\r\n    };\r\n\r\n}","import {DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES, SIMPLE_DIVISION, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getResult, argumentOfWrap, toFloat, toDisplayText, getSimpleOperator} from \"../utils\";\r\n\r\nexport default ( state )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , arrLogText\r\n        , percentNumber\r\n        , divisionByZeroBlocking\r\n    } = state;\r\n\r\n\r\n        if( mode > MODES.FIRST_OPERATOR && firstOperator !== SIMPLE_RESULT ){\r\n\r\n            if( ( !lastNumber && mode < MODES.LAST_NUMBER ) || mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = toFloat( displayText );\r\n                mode = MODES.LAST_NUMBER;\r\n            }\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n\r\n            if( mode === MODES.AFTER_RESULT ){\r\n                     arrLogText = getArrLogText(  firstNumber\r\n                    , firstOperator\r\n                    , lastNumber\r\n                    , SIMPLE_RESULT );\r\n\r\n                firstNumber = toFloat( displayText );\r\n                percentNumber = firstNumber;\r\n                /// если произведено деление на ноль\r\n            } else if( mode === MODES.LAST_NUMBER\r\n                && firstOperator === SIMPLE_DIVISION\r\n                && lastNumber === 0 ){\r\n\r\n                displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n                divisionByZeroBlocking = true;\r\n            } else {\r\n                /// если после получения результата был нажат оператор процентов,\r\n                // то лог будет иметь иметь не \"стандартный\" вид,\r\n                // кол-во его ячеек будет нечетным т.к. в последней будет храниться число\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length > 1 && arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                } else if( arrLogText.length === 1 ){\r\n                    firstArgument = [ arrLogText[ 0 ], getSimpleOperator( firstOperator )];\r\n                    secondArgument = toDisplayText( lastNumber );\r\n                }\r\n\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, SIMPLE_RESULT);\r\n\r\n                firstNumber = toFloat( displayText );\r\n                mode = MODES.AFTER_RESULT;\r\n                percentNumber = firstNumber;\r\n            }\r\n\r\n\r\n\r\n        } else if( mode === MODES.FIRST_OPERATOR ) {\r\n            lastNumber = toFloat( displayText );\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            arrLogText = getArrLogText( argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , firstOperator\r\n                , lastNumber\r\n                , SIMPLE_RESULT );\r\n            firstNumber = toFloat( displayText );\r\n            mode = MODES.AFTER_RESULT;\r\n            percentNumber = firstNumber;\r\n        } else {\r\n            firstOperator = SIMPLE_RESULT;\r\n            arrLogText = getArrLogText( firstNumber, firstNumber === 0 ? '' : SIMPLE_RESULT );\r\n            percentNumber = firstNumber;\r\n        }\r\n\r\n\r\n\r\n    return{ ...state\r\n        , displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , arrLogText\r\n        , percentNumber\r\n        , divisionByZeroBlocking\r\n    };\r\n\r\n}","import {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, MODES} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ( state\r\n                    , action )=>{\r\n\r\n    let {displayText\r\n            , firstNumber\r\n            , lastNumber\r\n            , mode\r\n            , firstOperator\r\n            , onDot\r\n            , arrLogText\r\n            , percentNumber\r\n        } = state;\r\n\r\n    const { value } = action;\r\n\r\n    switch ( value ) {\r\n\r\n        case MAIN_CLEAR:\r\n            displayText = store.displayText;\r\n            firstNumber = store.firstNumber;\r\n            lastNumber = store.lastNumber;\r\n            mode = store.mode;\r\n            firstOperator = store.firstOperator;\r\n            arrLogText = store.arrLogText;\r\n            percentNumber = store.percentNumber;\r\n            onDot = store.onDot;\r\n\r\n            break;\r\n\r\n        case MAIN_CLEAR_LAST:\r\n\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = store.firstNumber;\r\n                lastNumber = store.lastNumber;\r\n                mode = store.mode;\r\n                firstOperator = store.firstOperator;\r\n                arrLogText = store.arrLogText;\r\n                percentNumber = store.percentNumber;\r\n            }\r\n            else{\r\n                lastNumber = store.lastNumber;\r\n            }\r\n\r\n            displayText = store.displayText;\r\n\r\n            break;\r\n        case MAIN_BACKSPACE:\r\n            if( displayText !== \"0\" ){\r\n                if( mode < MODES.AFTER_RESULT ){\r\n                    displayText = displayText.slice( 0, -1 ) || \"0\";\r\n\r\n                    if( mode < MODES.LAST_NUMBER )\r\n                    {\r\n                        firstNumber = toFloat( displayText );\r\n                    }\r\n                    else\r\n                        lastNumber =  toFloat( displayText );\r\n                }else {\r\n                    firstNumber = toFloat( displayText );\r\n                    arrLogText = [];\r\n                }\r\n            }\r\n            break;\r\n\r\n        default:\r\n    }\r\n\r\n    return{  ...state\r\n        ,displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nimport {DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES} from \"../../constants\";\r\nimport {\r\n    argumentOfWrap,\r\n    getArrLogText,\r\n    getComplexesAttributes,\r\n    toDisplayText,\r\n    toFloat,\r\n    updateArrLogText,\r\n    wrapperArg\r\n} from \"../utils\";\r\n\r\nexport default ( state, action )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrLogText\r\n        , divisionByZeroBlocking\r\n        , numberIsWrapped\r\n    } = state;\r\n\r\n    const { value } = action;\r\n    const { cOperation, wrapText } = getComplexesAttributes( value );\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText(\r\n            wrapperArg(\r\n                argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , wrapText)\r\n        );\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText( arrLogText, wrapperArg( firstNumber,wrapText));\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            mode = MODES.LAST_NUMBER;\r\n        }\r\n\r\n    } else if( mode === MODES.LAST_NUMBER ){\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, wrapText);\r\n        if( lastNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.MULTIPLE_ACTION ){\r\n        arrLogText = updateArrLogText( arrLogText, displayText, wrapText);\r\n\r\n        if( toFloat( displayText ) === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( toFloat( displayText ) );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n\r\n        arrLogText = arrLogText.length > 1 ? [ wrapperArg( firstNumber, wrapText) ]\r\n                                           : [ wrapperArg( arrLogText[ 0 ],wrapText) ];\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    }\r\n\r\n    numberIsWrapped = true;\r\n\r\n    return{ ...state\r\n        ,displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrLogText\r\n        , numberIsWrapped\r\n        , divisionByZeroBlocking\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, roundNum, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ( state )=>{\r\n\r\n    let  {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    } = state;\r\n\r\n\r\n        if( mode === MODES.BEGIN_MODE ){\r\n            firstNumber = 0;\r\n            displayText = toDisplayText( firstNumber );\r\n            arrLogText = getArrLogText( firstNumber );\r\n        } else if ( mode === MODES.FIRST_OPERATOR ){\r\n            lastNumber = roundNum( firstNumber * ( percentNumber / 100 ) );\r\n            mode = MODES.LAST_NUMBER;\r\n            arrLogText = getArrLogText( arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            percentNumber = firstNumber;\r\n            numberIsWrapped = true;\r\n        } else if ( mode === MODES.LAST_NUMBER ){\r\n            lastNumber = roundNum( lastNumber * ( percentNumber / 100 ) );\r\n\r\n            // если и последующие нажатие на кнопку проценты, значит вторая цифра уже выведена в лог\r\n            // ее надо заменить, если первое то лог заканчивается еще пока последним оператором\r\n            arrLogText = getArrLogText( arrLogText.length%2 ? arrLogText.slice( 0, -1 ) : arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            numberIsWrapped = true;\r\n        } else if ( mode === MODES.AFTER_RESULT ){\r\n            displayText = toDisplayText( roundNum( toFloat( displayText ) * ( percentNumber / 100 ) ) );\r\n            firstNumber = toFloat( displayText );\r\n            arrLogText = getArrLogText( displayText );\r\n            //lastNumber = 0;\r\n        }\r\n\r\n    return{...state\r\n        ,displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nimport {MEMORY_CLEAR, MEMORY_LIST, MEMORY_MINUS, MEMORY_PLUS, MEMORY_READ, MEMORY_SAVE, MODES} from \"../../constants\";\r\nimport {toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ( state, action, )=>{\r\n\r\n    let {displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrMemory\r\n        , arrLogText\r\n        , numberIsWrapped\r\n        , memoryListOnOpen\r\n    } = state;\r\n\r\n    const { value } = action;\r\n\r\n    numberIsWrapped = true;\r\n\r\n    switch ( value ) {\r\n\r\n        case MEMORY_CLEAR:\r\n            arrMemory = [];\r\n            numberIsWrapped = false;\r\n            break;\r\n        case MEMORY_READ:\r\n            const val = arrMemory[ arrMemory.length - 1 ];\r\n            displayText = toDisplayText( val );\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = val;\r\n            } else if(  mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = val;\r\n                mode = MODES.LAST_NUMBER;\r\n            } else {\r\n                lastNumber = val;\r\n            }\r\n\r\n            break;\r\n        case MEMORY_PLUS:\r\n            if( arrMemory.length ){\r\n                arrMemory[ arrMemory.length - 1 ] +=  toFloat( displayText );\r\n            }else {\r\n                arrMemory.push( toFloat( displayText ));\r\n            }\r\n            break;\r\n        case MEMORY_MINUS:\r\n            if( arrMemory.length ){\r\n                arrMemory[ arrMemory.length - 1 ] -= toFloat( displayText );\r\n            } else {\r\n                arrMemory.push( toFloat( displayText ));\r\n            }\r\n            break;\r\n        case MEMORY_SAVE:\r\n            arrMemory.push( toFloat( displayText ));\r\n            break;\r\n        case MEMORY_LIST:\r\n            memoryListOnOpen = true;\r\n            break;\r\n\r\n        default:\r\n            throw new Error( \"Unknown type memory option in the servantMemory \");\r\n    }\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        arrLogText = [];\r\n    }\r\n\r\n    return{ ...state\r\n        ,displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , arrMemory\r\n        , arrLogText\r\n        , numberIsWrapped: numberIsWrapped\r\n        , memoryListOnOpen\r\n    };\r\n\r\n}","import {\r\n    MEMORY_ELEMENT_CLEAR,\r\n    MEMORY_ELEMENT_MINUS,\r\n    MEMORY_ELEMENT_PLUS,\r\n    MEMORY_LIST_ON_CLOSE,\r\n    ON_MEMORY_LIST_CLEAR\r\n} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\n\r\nexport default ( state, action, )=>{\r\n\r\n    let {\r\n        displayText\r\n        , arrMemory\r\n        , memoryListOnOpen\r\n    } = state;\r\n\r\n    const { value } = action;\r\n\r\n\r\n\r\n    if( value === MEMORY_LIST_ON_CLOSE ){\r\n        memoryListOnOpen = false;\r\n    } else if ( value === ON_MEMORY_LIST_CLEAR ){\r\n        arrMemory = [];\r\n    } else {\r\n        if( value.die === MEMORY_ELEMENT_CLEAR ){\r\n            arrMemory.splice( value.id, 1 );\r\n        } else if ( value.die === MEMORY_ELEMENT_PLUS ){\r\n            arrMemory[ value.id ] += toFloat( displayText );\r\n        } else if ( value.die === MEMORY_ELEMENT_MINUS ){\r\n            arrMemory[ value.id ] -= toFloat( displayText );\r\n        }\r\n    }\r\n\r\n    return{ ...state\r\n        , arrMemory: [ ...arrMemory ]\r\n        , memoryListOnOpen\r\n    };\r\n\r\n}","import React from \"react\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            <div className=\"full_width\" id=\"control_panel\">\r\n                <h1 className=\"label_ctrl_panel\">Калькулятор</h1>\r\n                <fieldset id=\"field_controls\">\r\n                    <button className=\"main_controls min_btn\" disabled={true}/>\r\n                    <button className=\"main_controls max_btn\" disabled={true}/>\r\n                    <button className=\"main_controls close_btn\" disabled={true}/>\r\n                </fieldset>\r\n            </div>\r\n            <div className=\"full_width\" id=\"dashboard\">\r\n                <button className=\"subtitle_controls menu_btn\" disabled={true}/>\r\n                <h2 className=\"subitile_ordinary\">Обычный</h2>\r\n                <button className=\"subtitle_controls stick_btn\" disabled={true}/>\r\n                <button className=\"subtitle_controls journal_btn\" disabled={true}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {formatDisplayText} from \"../reducers/utils\";\r\nimport {FONT_SIZE_OUTPUT_WINDOW, WIDTH_OUTPUT_WINDOW} from \"../constants\";\r\n\r\nfunction Output( {\r\n                     rawText\r\n                    , logText\r\n                 } ) {\r\n\r\n    const displayText = formatDisplayText( rawText );\r\n    const outputBlock = React.createRef();\r\n    const [ rightOffset, setRightOffset ] = useState( 0 );\r\n    const [ spanStyle, setSpanStyle ] = useState({\r\n                                                            right: 0\r\n                                                            , textAlign: 'right'\r\n                                                        });\r\n    const [ onManualShift, setOnManualShift ] = useState( false  );\r\n    const [ logPWidth, setLogPWidth ] = useState( 0  );\r\n    const [ logSpanWidth, setLogSpanWidth ] = useState( 0  );\r\n    const [ arrowLeft, setArrowLeft ] = useState( null  );\r\n    const [ arrowRight, setArrowRight ] = useState( null  );\r\n\r\n    useEffect( ()=>{\r\n\r\n        /// for resize font of output displayText\r\n        const outputSpan = outputBlock.current.children[ 1 ].firstChild.firstChild.firstChild;\r\n        const parentP = outputBlock.current.children[ 1 ].firstChild.firstChild;\r\n\r\n        if( outputSpan.offsetWidth > WIDTH_OUTPUT_WINDOW ){\r\n            const fontSize  = parentP.style.fontSize.substr(0,2);\r\n            const nextSize = Math.ceil(fontSize * ( WIDTH_OUTPUT_WINDOW / outputSpan.offsetWidth ) );\r\n            parentP.style.fontSize = `${ nextSize }px`;\r\n\r\n        } else if( outputSpan.textContent.length > 10 && outputSpan.offsetWidth < WIDTH_OUTPUT_WINDOW){\r\n            const fontSize  = parentP.style.fontSize.substr(0,2);\r\n            const nextSize = Math.ceil(fontSize / ( outputSpan.offsetWidth / WIDTH_OUTPUT_WINDOW  ) );\r\n            parentP.style.fontSize = `${ nextSize < FONT_SIZE_OUTPUT_WINDOW ? nextSize : FONT_SIZE_OUTPUT_WINDOW}px`;\r\n        } else if( outputSpan.textContent.length < 10 ){\r\n            parentP.style.fontSize = `${ FONT_SIZE_OUTPUT_WINDOW }px`;\r\n        }\r\n\r\n\r\n        /// show/hide the control arrows to position the text variable logText\r\n        setArrowLeft(  outputBlock.current.children[ 0 ].firstChild );\r\n        if( !arrowLeft ) return;\r\n        setArrowRight( outputBlock.current.children[ 0 ].children[ 2 ] );\r\n        if( !arrowRight ) return;\r\n        const logSpan = outputBlock.current.children[ 0 ].children[ 1 ].firstChild;\r\n        const logP = outputBlock.current.children[ 0 ].children[ 1 ];\r\n        setLogPWidth(  outputBlock.current.parentNode.offsetWidth - arrowLeft.offsetWidth - arrowRight.offsetWidth - 4 );\r\n        setLogSpanWidth( logSpan.offsetWidth );\r\n\r\n        ///set a fixed width of the log display field, since according to the terms of\r\n        // relative layout, its initial width in pixels is unknown\r\n        logP.style.width = `${ logPWidth }px`;\r\n\r\n        if( !onManualShift && logSpanWidth > logPWidth ){\r\n\r\n            arrowLeft.style.visibility = 'visible';\r\n            if( onManualShift === false ){\r\n                setRightOffset( logSpanWidth - logPWidth );\r\n                logSpan.style.right = `${ ( logSpanWidth - logPWidth ) }px`;\r\n                logSpan.style.textAlign = 'left';\r\n\r\n            }\r\n        } else if( !onManualShift || logSpanWidth < logPWidth ) {\r\n            logSpan.style.right = '0px';\r\n            logSpan.style.textAlign = 'right';\r\n            arrowRight.style.visibility = 'hidden';\r\n            arrowLeft.style.visibility = 'hidden';\r\n\r\n            setOnManualShift( false );\r\n        }\r\n\r\n    },[ setRightOffset\r\n            , outputBlock\r\n            , arrowLeft\r\n            , arrowRight\r\n            , onManualShift\r\n            , logSpanWidth\r\n            , logPWidth\r\n            , setLogSpanWidth\r\n            , setLogPWidth ]);\r\n\r\n\r\n\r\n    const clickArrow = ( dirRight )=>{\r\n\r\n        const stepShift = 100;\r\n        let rOffset = rightOffset + ( dirRight ? stepShift : -stepShift );\r\n\r\n\r\n        if( rOffset <= 0 ){\r\n            rOffset = 0;\r\n            arrowLeft.style.visibility = 'hidden';\r\n\r\n        } else {\r\n            arrowLeft.style.visibility = 'visible';\r\n        }\r\n\r\n        if( rOffset + logPWidth >= logSpanWidth ){\r\n\r\n            rOffset = logSpanWidth - logPWidth;\r\n            arrowRight.style.visibility = 'hidden';\r\n        } else {\r\n            arrowRight.style.visibility = 'visible';\r\n        }\r\n\r\n        setSpanStyle( { right: `${ rOffset }px`\r\n            , textAlign: 'left' } );\r\n\r\n        setRightOffset( rOffset );\r\n        if( !onManualShift )setOnManualShift( true );\r\n    };\r\n\r\n    return(\r\n        <section className=\"full_width\"  ref={ outputBlock }>\r\n            <div className=\"full_width story_calc\">\r\n                <button\r\n                        className=\"progress_arrows left_progress_arrow\"\r\n                        onClick={ ()=>clickArrow( 0 ) }\r\n                />\r\n                <p className={ 'progress_content' } >\r\n                    <span className={ 'span_log_text' } style={ spanStyle } >\r\n                        { logText }\r\n                    </span>\r\n                </p>\r\n                <button\r\n                        className=\"progress_arrows right_progress_arrow\"\r\n                        onClick={ ()=>clickArrow( 1 ) }\r\n                />\r\n            </div>\r\n            <div className=\"full_width viewer_panel\" id=\"viewer\">\r\n                <blockquote>\r\n                        <p className='outputWindow' >\r\n                            <span>\r\n                                { displayText }\r\n                            </span>\r\n                        </p>\r\n                </blockquote>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    \r\n    state => {\r\n        return ({\r\n                rawText: state.displayText\r\n                , logText: state.arrLogText.join( ' ' )\r\n\r\n        });\r\n    }, null\r\n)( Output );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_DOT, ON_CLICK_NUMBER, ON_CLICK_SIGN} from \"../../constants\";\r\n\r\nconst NumsBoard = ( {\r\n                        clickNumber\r\n                        , clickSymbol\r\n                        , divisionByZeroBlocking\r\n                    } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_num_btns\">\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 7 )}>7</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 8 )}>8</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 9 )}>9</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 4 )}>4</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 5 )}>5</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 6 )}>6</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 1 )}>1</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 2 )}>2</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 3 )}>3</button>\r\n            <button className=\"input_btns nmr_btns btn_plus_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () =>clickSymbol( )}/>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_zerro\" onClick={ () =>clickNumber( 0 )}>0</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_dote\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => clickSymbol( \".\" )}>,</button>\r\n        </fieldset>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        clickNumber: ( v ) => {\r\n            dispatch( {type: ON_CLICK_NUMBER, value: v })\r\n        }\r\n        , clickSymbol: ( arg ) => {\r\n            arg ? dispatch( {type: ON_CLICK_DOT })\r\n                : dispatch( {type: ON_CLICK_SIGN })\r\n        }\r\n    })\r\n)( NumsBoard );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_SIMPLE_OPERATOR, SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS} from \"../../constants\";\r\n\r\nconst SimpleOperators = ( {\r\n                              onClick\r\n                              , divisionByZeroBlocking\r\n                          } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_simple_btns\">\r\n            <button className=\"input_btns btn_division\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_DIVISION )} />\r\n            <button className=\"input_btns btn_multiply\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MULTIPLY )} />\r\n            <button className=\"input_btns btn_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MINUS )} />\r\n            <button className=\"input_btns btn_plus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_PLUS )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( SimpleOperators);","import {ON_CLICK_RESULT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnResult = ( {\r\n                        onClick\r\n                    } )=>{\r\n\r\n    return(\r\n        < fieldset >\r\n            <button className=\"input_btns btn_result\" onClick={ () => onClick( )} />\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( ) => {\r\n            dispatch( {type: ON_CLICK_RESULT })\r\n        }\r\n    })\r\n)( BtnResult);","import {ON_CLICK_PERCENT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnPercent = ( {\r\n                         onClick\r\n                        , divisionByZeroBlocking\r\n                     } )=>{\r\n    return(\r\n        <fieldset className=\"fieldset_percent\">\r\n            <button className=\"input_btns btn_percent\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( ) } >%</button>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_PERCENT, value: null })\r\n        }\r\n    })\r\n)( BtnPercent);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, ON_CLICK_MAIN} from \"../../constants\";\r\n\r\nconst MainBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"main_btns\">\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR_LAST ) }>CE</button>\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR ) } >C</button>\r\n            <button className=\"input_btns btn_backspace\"  onClick={ () => props.onClick( MAIN_BACKSPACE ) } />\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MAIN, value: v })\r\n        }\r\n    })\r\n)( MainBtns);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    MEMORY_CLEAR,\r\n    MEMORY_LIST,\r\n    MEMORY_MINUS,\r\n    MEMORY_PLUS,\r\n    MEMORY_READ,\r\n    MEMORY_SAVE,\r\n    ON_CLICK_MEMORY\r\n} from \"../../constants\";\r\n\r\nconst MemoryBtns = ( {\r\n                         onClick\r\n                         , divisionByZeroBlocking\r\n                        , memoryEngaged\r\n                     } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"input_fieldsets\">\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged }\r\n                    onClick={ () => onClick( MEMORY_CLEAR )}\r\n                    >MC</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged }\r\n                    onClick={ () => onClick( MEMORY_READ )}\r\n                    >MR</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_PLUS)}\r\n                    >M+</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_MINUS )}\r\n                    >M-</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_SAVE )}\r\n                    >MS</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged }\r\n                    onClick={ () => onClick( MEMORY_LIST )}\r\n                    >M<sup className=\"down_arrow\">▼</sup></button>\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n            , memoryEngaged: !state.arrMemory.length\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MEMORY, value: v })\r\n        }\r\n    })\r\n)( MemoryBtns);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X, ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst ComplexesBtns = ( {\r\n                            onClick\r\n                            , divisionByZeroBlocking\r\n                        } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_complexes_btns\" disabled={ false }>\r\n            <button className=\"input_btns btn_one_x\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( COMPLEXES_DIVISION_X )} />\r\n            <button className=\"input_btns btn_x2\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQR_X )} />\r\n            <button className=\"input_btns btn_2x\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQRT_X )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( ComplexesBtns);","import React from \"react\";\r\nimport NumsBoard from \"./input_btns/NumsBoard\";\r\nimport SimpleOperators from \"./input_btns/SimpleOperators\";\r\nimport BtnResult from \"./input_btns/BtnResult\";\r\nimport BtnPercent from \"./input_btns/BtnPercent\";\r\nimport MainBtns from \"./input_btns/MainBtns\";\r\nimport MemoryBtns from \"./input_btns/MemoryBtns\";\r\nimport ComplexesBtns from \"./input_btns/ComplexesBtns\";\r\n\r\nconst Input = () => {\r\n    return(\r\n        <section className=\"full_width input_section\" >\r\n            <MemoryBtns/>\r\n            <section className=\"input_fieldsets\">\r\n                <BtnPercent/>\r\n                <MainBtns />\r\n                <ComplexesBtns/>\r\n                <NumsBoard />\r\n                <SimpleOperators />\r\n                <BtnResult/>\r\n            </section>\r\n        </section>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React, {useState} from \"react\";\r\nimport {MEMORY_ELEMENT_CLEAR, MEMORY_ELEMENT_MINUS, MEMORY_ELEMENT_PLUS} from \"../../constants\";\r\nimport {formatDisplayText, toDisplayText} from \"../../reducers/utils\";\r\n\r\nfunction MemoryEntity( {\r\n                           onClickElement\r\n                        , value\r\n                        , id\r\n                       } ) {\r\n\r\n    const [ butsVisible, setButsVisible ] = useState( 'hidden' );\r\n    const ids = [ 'MC', 'M+', 'M-'];\r\n\r\n\r\n    const onClickBtn = ( e )=>{\r\n        switch ( e.target.id ) {\r\n            case ids[ 0 ]:\r\n                onClickElement( { die: MEMORY_ELEMENT_CLEAR, id: id });\r\n                break;\r\n            case ids[ 1 ]:\r\n                onClickElement( { die: MEMORY_ELEMENT_PLUS, id: id });\r\n                break;\r\n            case ids[ 2 ]:\r\n                onClickElement( { die: MEMORY_ELEMENT_MINUS, id: id });\r\n                break;\r\n\r\n            default:\r\n                throw new Error( 'Received unknown id ');\r\n\r\n        }\r\n    };\r\n\r\n    const buttons = ids.map( ( v )=>{\r\n        return ( <button className={'memory_list_one_button'}\r\n                         id={v}\r\n                         key={ `btn${ v }`}\r\n                         onClick={ onClickBtn }>{ v }</button> );\r\n    });\r\n    return(\r\n\r\n        <div className={'memory_entity'}\r\n             onMouseOver={( )=>setButsVisible( 'visible' ) } \r\n             onMouseOut={( )=>setButsVisible( 'hidden' ) } >\r\n            <p className={'outputWindow memoryP'}>{ formatDisplayText( toDisplayText( value ) ) }</p>\r\n            <div className={'memory_list_buttons'} style={{ visibility: butsVisible }}>\r\n                { buttons }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemoryEntity;","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    MEMORY_LIST_ON_CLOSE, NOTHING_IS_SAVED_IN_MEMORY,\r\n    ON_CLICK_MEMORY_ELEMENT,\r\n    ON_CLICK_MEMORY_LIST,\r\n    ON_MEMORY_LIST_CLEAR\r\n} from \"../../constants\";\r\nimport MemoryEntity from \"./MemoryEntity\";\r\n\r\nfunction MemoryScreen({\r\n                        onClick\r\n                        , onClickElement\r\n                        , memoryListOnOpen\r\n                        , arrMemory\r\n                      }){\r\n\r\n    const CLOSE_MARGIN_TOP = '515px';\r\n    const OPEN_MARGIN_TOP = '201px';\r\n\r\n    const memList = arrMemory.map( ( v, i )=>{\r\n       return  <MemoryEntity\r\n                    onClickElement={ onClickElement }\r\n                    value={ v }\r\n                    key={ `em${i}` }\r\n                    id={ i } />;\r\n    });\r\n\r\n    const mockOfBlankScreen = ( <p className={'full_width'}>{ NOTHING_IS_SAVED_IN_MEMORY}</p>);\r\n\r\n    const onClickClose = ( e )=>{\r\n        if( e.target.id === 'memory_screen'){\r\n            onClick( MEMORY_LIST_ON_CLOSE )\r\n        }\r\n    };\r\n\r\n    const onClickClearList = ()=>{\r\n            onClick( ON_MEMORY_LIST_CLEAR );\r\n    };\r\n\r\n    const [ marginTop, setMarginTop ] = useState( CLOSE_MARGIN_TOP );\r\n\r\n    useEffect( ()=>{\r\n        if( memoryListOnOpen ) setMarginTop( OPEN_MARGIN_TOP );\r\n        else setMarginTop( CLOSE_MARGIN_TOP );\r\n\r\n    },[\r\n        setMarginTop\r\n        , memoryListOnOpen\r\n    ]);\r\n\r\n    ///TODO: Custom scrollbar https://habr.com/ru/company/2gis/blog/169359/\r\n    return (\r\n        <section\r\n            style={{ visibility: memoryListOnOpen ? 'visible' : \"hidden\" }}\r\n            className=\"full_width memory_screen\"\r\n            id={ 'memory_screen' }\r\n            onClick={ onClickClose }\r\n        >\r\n\r\n            <div className=\"memory_field\" style={{ marginTop: marginTop }}>\r\n                <div className={'memory_list'}>\r\n                    { arrMemory.length ? memList.reverse() : mockOfBlankScreen }\r\n                </div>\r\n                <div className=\"delete_memory_button_wrapper\" >\r\n                    <button\r\n                            onClick={ onClickClearList }\r\n                            style={{ visibility: arrMemory.length === 0 ? 'hidden' : 'visible'}  }\r\n                            className=\"delete_memory_button\"\r\n                            title={'trash'}/>\r\n                </div>\r\n\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n\r\n    state => {\r\n        return ({\r\n            memoryListOnOpen: state.memoryListOnOpen\r\n            , arrMemory: state.arrMemory\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MEMORY_LIST, value: v })\r\n        }\r\n        , onClickElement: ( v ) =>{\r\n            dispatch( { type: ON_CLICK_MEMORY_ELEMENT, value: v })\r\n        }\r\n\r\n    })\r\n)( MemoryScreen );","import React from 'react';\r\nimport Header from \"./calculator/Header\";\r\nimport Output from \"./calculator/Output\";\r\nimport Input from \"./calculator/Input\";\r\nimport MemoryScreen from \"./calculator/memory_screen/MemoryScreen\";\r\n\r\nfunction App() {\r\n  return (\r\n            <main role=\"main\" className={\"App active\"}>\r\n                <Header />\r\n                <Output />\r\n                <Input />\r\n                <MemoryScreen />\r\n            </main>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from \"./reducers/index\";\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {createStore} from 'redux';\r\n\r\n/**\r\n * Логирует все экшены и состояния после того, как они будут отправлены.\r\n */\r\n/*\r\nconst logger = store => next => action => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n\r\n    const act = { type: \"onClickNumber\", value: \"1\" };\r\n    let res = next( act );\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd(action.type);\r\n    return result;\r\n};\r\n\r\n\r\nconst store = createStore( reducer, composeWithDevTools( applyMiddleware( logger ) ) );\r\n*/\r\nconst store = ( process && process.env.NODE_ENV === 'development' ) ?\r\n    createStore( reducer,window.__REDUX_DEVTOOLS_EXTENSION__\r\n                                && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    : createStore( reducer ) ;\r\nReactDOM.render(\r\n    <Provider store={ store  } >\r\n          <React.StrictMode>\r\n            <App />\r\n          </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}