{"version":3,"sources":["calculator/Header.js","calculator/Output.js","constants.js","calculator/input_btns/NumsBoard.js","calculator/input_btns/SimpleOperators.js","calculator/input_btns/BtnResult.js","calculator/input_btns/BtnPercent.js","calculator/input_btns/MainBtns.js","calculator/input_btns/MemoryBtns.js","calculator/input_btns/ComplexesBtns.js","calculator/Input.js","App.js","serviceWorker.js","reducers/utils.js","reducers/servants/servantOnSign.js","reducers/servants/servantClickNumber.js","reducers/servants/servantOnDot.js","reducers/servants/servantSimpleOperator.js","reducers/servants/servantResult.js","reducers/servants/servantMain.js","reducers/servants/servantComplexes.js","reducers/servants/servantPercentOperator.js","reducers/servants/servantMemory.js","reducers/index.js","index.js"],"names":["Header","className","id","disabled","connect","state","displayText","logText","arrLogText","join","isNaN","parts","split","onMinus","parseInt","slice","len","length","abs","i","invert","reverse","trim","formatDisplayText","MODES","divisionByZeroBlocking","dispatch","clickNumber","v","type","value","clickSymbol","arg","onClick","props","memoryEngaged","arrMemory","Input","App","role","Boolean","window","location","hostname","match","getArrLogText","args","arr","flatDeep","map","wasWrapped","toDisplayText","getSimpleOperator","filter","toFloat","roundNum","parseFloat","replace","nm","toString","operator","o","getResult","firstNumber","lastNumber","firstOperator","result","toFixed","getOutput","base","dot","includes","wrapperArg","expression","wrapText","d","Infinity","reduce","acc","val","concat","Array","isArray","argumentOfWrap","argWrap","verificationNumber","updateArrLogText","arrLog","firstArgument","secondArgument","pop","undefined","indexOf","mode","onDot","percentNumber","numberIsWrapped","store","firstPart","selectedNumber","typeOperation","attributes","cOperation","Math","pow","sqrt","Error","getComplexesAttributes","push","NaN","createStore","action","servantResult","servantMain","servantOnDot","servantOnSign","servantClickNumber","servantSimpleOperator","servantComplexes","servantPercentOperator","servantMemory","console","group","table","groupEnd","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63d83c26.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            <div className=\"full_width\" id=\"control_panel\">\r\n                <h1 className=\"label_ctrl_panel\">Калькулятор</h1>\r\n                <fieldset id=\"field_controls\">\r\n                    <button className=\"main_controls min_btn\" disabled={true}/>\r\n                    <button className=\"main_controls max_btn\" disabled={true}/>\r\n                    <button className=\"main_controls close_btn\" disabled={true}/>\r\n                </fieldset>\r\n            </div>\r\n            <div className=\"full_width\" id=\"dashboard\">\r\n                <button className=\"subtitle_controls menu_btn\" disabled={true}/>\r\n                <h2 className=\"subitile_ordinary\">Обычный</h2>\r\n                <button className=\"subtitle_controls stick_btn\" disabled={true}/>\r\n                <button className=\"subtitle_controls journal_btn\" disabled={true}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction Output( {\r\n                     displayText\r\n                    , logText\r\n                 } ) {\r\n\r\n    const formatDisplayText = ( displayText )=>{\r\n        ///TODO: Сделать форматирование размера текста в зависимости от длинны\r\n\r\n        if( isNaN( displayText )){\r\n            return  displayText;\r\n        } else {\r\n            const parts = displayText.split( ',');\r\n            let onMinus = false;\r\n\r\n            if( parseInt( parts[ 0 ] ) < 0 ){\r\n                onMinus = true;\r\n                parts[ 0 ] = parts[ 0 ].slice( 1 );\r\n            }\r\n\r\n\r\n            const len = parts[ 0 ].length;\r\n            let abs = \"\";\r\n\r\n            for (let i = len -1; i >= 0; i--) {\r\n                abs += ( len - i )%3?parts[ 0 ][ i ]: `${ parts[ 0 ][ i ] } `;\r\n            }\r\n\r\n            const invert = abs.split('').reverse();\r\n            parts[ 0 ] = invert.join('').trim();\r\n\r\n            return `${ onMinus? \"-\": ''}${parts.join(\",\")}`;\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n    return(\r\n        <section className=\"full_width\">\r\n            <div className=\"full_width story_calc\">\r\n                <button className=\"progress_arrows left_progress_arrow\"/>\r\n                <p className=\"progress_content\">{ logText }</p>\r\n                <button className=\"progress_arrows right_progress_arrow\" />\r\n            </div>\r\n            <div className=\"full_width viewer_panel\" id=\"viewer\">\r\n                <blockquote>\r\n                    <p className=\"viewport\">{ formatDisplayText( displayText )}</p>\r\n                </blockquote>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    \r\n    state => {\r\n        return ({\r\n                displayText: state.displayText\r\n                , logText: state.arrLogText.join( ' ' )\r\n\r\n        });\r\n    }, null\r\n)( Output );","/// action names\r\nexport const ON_CLICK_NUMBER = \"onClickNumber\";\r\nexport const ON_CLICK_DOT = \"onClickDot\";\r\nexport const ON_CLICK_SIGN = \"onClickSign\";\r\nexport const ON_CLICK_SIMPLE_OPERATOR = \"onClickSimpleOperator\";\r\nexport const ON_CLICK_RESULT = \"onClickResult\";\r\nexport const ON_CLICK_MAIN = \"onClickMain\";\r\nexport const ON_CLICK_COMPLEXES = \"onClickComplexes\";\r\nexport const ON_CLICK_MEMORY = \"onClickMemory\";\r\nexport const ON_CLICK_PERCENT = \"onClickPercent\";\r\n\r\n\r\n/// simple operators\r\nexport const SIMPLE_MINUS = \"simpleMinus\";\r\nexport const SIMPLE_PLUS = \"simplePlus\";\r\nexport const SIMPLE_MULTIPLY = \"simpleMultiply\";\r\nexport const SIMPLE_DIVISION = \"simpleDivision\";\r\nexport const SIMPLE_RESULT = \"simpleResult\";\r\n\r\n/// default value of the firstOperator var\r\nexport const NOT_OPERATOR = \"notOperator\";\r\n\r\n\r\n\r\n/// main operators\r\nexport const MAIN_BACKSPACE = \"mainBackspace\";\r\nexport const MAIN_CLEAR = \"mainClear\";\r\nexport const MAIN_CLEAR_LAST = \"mainClearLast\";\r\n\r\n/// complexes operators\r\nexport const COMPLEXES_DIVISION_X = \"complexesDivisionX\";\r\nexport const COMPLEXES_SQR_X = \"complexesSqrX\";\r\nexport const COMPLEXES_SQRT_X = \"complexesSqrtX\";\r\n\r\n\r\nexport const DIVISION_BY_ZERO_IS_NOT_POSSIBLE = \"Деление на ноль невозможно\";\r\n\r\n\r\n/// memory operators\r\nexport const MEMORY_CLEAR = 'memoryClear';\r\nexport const MEMORY_READ = 'memoryRead';\r\nexport const MEMORY_PLUS = 'memoryPlus';\r\nexport const MEMORY_MINUS = 'memoryMinus';\r\nexport const MEMORY_SAVE = 'memorySave';\r\nexport const MEMORY_LIST = 'memoryList';\r\n\r\n\r\n/// modes set\r\n\r\nexport const MODES = {\r\n    BEGIN_MODE: 0\r\n    , FIRST_OPERATOR: 1\r\n    , MULTIPLE_ACTION: 2\r\n    , LAST_NUMBER: 3\r\n    , AFTER_RESULT: 4\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_DOT, ON_CLICK_NUMBER, ON_CLICK_SIGN} from \"../../constants\";\r\n\r\nconst NumsBoard = ( {\r\n                        clickNumber\r\n                        , clickSymbol\r\n                        , divisionByZeroBlocking\r\n                    } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_num_btns\">\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 7 )}>7</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 8 )}>8</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 9 )}>9</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 4 )}>4</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 5 )}>5</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 6 )}>6</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 1 )}>1</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 2 )}>2</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 3 )}>3</button>\r\n            <button className=\"input_btns nmr_btns btn_plus_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () =>clickSymbol( )}/>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_zerro\" onClick={ () =>clickNumber( 0 )}>0</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_dote\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => clickSymbol( \".\" )}>,</button>\r\n        </fieldset>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        clickNumber: ( v ) => {\r\n            dispatch( {type: ON_CLICK_NUMBER, value: v })\r\n        }\r\n        , clickSymbol: ( arg ) => {\r\n            arg ? dispatch( {type: ON_CLICK_DOT })\r\n                : dispatch( {type: ON_CLICK_SIGN })\r\n        }\r\n    })\r\n)( NumsBoard );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_SIMPLE_OPERATOR, SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS} from \"../../constants\";\r\n\r\nconst SimpleOperators = ( {\r\n                              onClick\r\n                              , divisionByZeroBlocking\r\n                          } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_simple_btns\">\r\n            <button className=\"input_btns btn_division\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_DIVISION )} />\r\n            <button className=\"input_btns btn_multiply\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MULTIPLY )} />\r\n            <button className=\"input_btns btn_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MINUS )} />\r\n            <button className=\"input_btns btn_plus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_PLUS )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( SimpleOperators);","import {ON_CLICK_RESULT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnResult = ( {\r\n                        onClick\r\n                    } )=>{\r\n\r\n    return(\r\n        < fieldset >\r\n            <button className=\"input_btns btn_result\" onClick={ () => onClick( )} />\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( ) => {\r\n            dispatch( {type: ON_CLICK_RESULT })\r\n        }\r\n    })\r\n)( BtnResult);","import {ON_CLICK_PERCENT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnPercent = ( {\r\n                         onClick\r\n                        , divisionByZeroBlocking\r\n                     } )=>{\r\n    return(\r\n        <fieldset className=\"fieldset_percent\">\r\n            <button className=\"input_btns btn_percent\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( ) } >%</button>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_PERCENT, value: null })\r\n        }\r\n    })\r\n)( BtnPercent);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, ON_CLICK_MAIN} from \"../../constants\";\r\n\r\nconst MainBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"main_btns\">\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR_LAST ) }>CE</button>\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR ) } >C</button>\r\n            <button className=\"input_btns btn_backspace\"  onClick={ () => props.onClick( MAIN_BACKSPACE ) } />\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MAIN, value: v })\r\n        }\r\n    })\r\n)( MainBtns);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    MEMORY_CLEAR,\r\n    MEMORY_LIST,\r\n    MEMORY_MINUS,\r\n    MEMORY_PLUS,\r\n    MEMORY_READ,\r\n    MEMORY_SAVE,\r\n    ON_CLICK_MEMORY\r\n} from \"../../constants\";\r\n\r\nconst MemoryBtns = ( {\r\n                         onClick\r\n                         , divisionByZeroBlocking\r\n                        , memoryEngaged\r\n                     } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"input_fieldsets\">\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged }\r\n                    onClick={ () => onClick( MEMORY_CLEAR )}\r\n                    >MC</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged }\r\n                    onClick={ () => onClick( MEMORY_READ )}\r\n                    >MR</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_PLUS)}\r\n                    >M+</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_MINUS )}\r\n                    >M-</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( MEMORY_SAVE )}\r\n                    >MS</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || memoryEngaged || true }\r\n                    onClick={ () => onClick( MEMORY_LIST )}\r\n                    >M<sup className=\"down_arrow\">▼</sup></button>\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n            , memoryEngaged: !state.arrMemory.length\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MEMORY, value: v })\r\n        }\r\n    })\r\n)( MemoryBtns);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X, ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst ComplexesBtns = ( {\r\n                            onClick\r\n                            , divisionByZeroBlocking\r\n                        } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_complexes_btns\" disabled={ false }>\r\n            <button className=\"input_btns btn_one_x\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( COMPLEXES_DIVISION_X )} />\r\n            <button className=\"input_btns btn_x2\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQR_X )} />\r\n            <button className=\"input_btns btn_2x\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQRT_X )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( ComplexesBtns);","import React from \"react\";\r\nimport NumsBoard from \"./input_btns/NumsBoard\";\r\nimport SimpleOperators from \"./input_btns/SimpleOperators\";\r\nimport BtnResult from \"./input_btns/BtnResult\";\r\nimport BtnPercent from \"./input_btns/BtnPercent\";\r\nimport MainBtns from \"./input_btns/MainBtns\";\r\nimport MemoryBtns from \"./input_btns/MemoryBtns\";\r\nimport ComplexesBtns from \"./input_btns/ComplexesBtns\";\r\n\r\nconst Input = () => {\r\n    return(\r\n        <section className=\"full_width input_section\" >\r\n            <MemoryBtns/>\r\n            <section className=\"input_fieldsets\">\r\n                <BtnPercent/>\r\n                <MainBtns />\r\n                <ComplexesBtns/>\r\n                <NumsBoard />\r\n                <SimpleOperators />\r\n                <BtnResult/>\r\n            </section>\r\n        </section>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Header from \"./calculator/Header\";\r\nimport Output from \"./calculator/Output\";\r\nimport Input from \"./calculator/Input\";\r\n\r\nfunction App() {\r\n  return (\r\n            <main role=\"main\" className={\"App active\"}>\r\n                <Header />\r\n                <Output />\r\n                <Input />\r\n            </main>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X,\r\n    SIMPLE_DIVISION,\r\n    SIMPLE_MINUS,\r\n    SIMPLE_MULTIPLY,\r\n    SIMPLE_PLUS,\r\n    SIMPLE_RESULT\r\n} from \"../constants\";\r\n\r\nexport const getArrLogText = ( ...args ) =>{\r\n\r\n    let arr = flatDeep( args ).map( v => {\r\n        let res =\"\";\r\n        if( typeof v === \"number\" || wasWrapped( v ) )\r\n            res = toDisplayText( v );\r\n        else\r\n            res = getSimpleOperator( v );\r\n        if( res ) return res;\r\n        return v;\r\n    });\r\n\r\n    return arr.filter( v => v !== \"\" );\r\n};\r\n\r\nexport const toFloat = (displayText )=> {\r\n    return roundNum( parseFloat(  displayText.replace( \",\", '.')) );\r\n};\r\n\r\nexport const toDisplayText = ( nm )=>{\r\n\r\n    return nm.toString().replace( \".\", \",\");\r\n};\r\nexport const getSimpleOperator = (operator )=>{\r\n\r\n    let o = '';\r\n    switch ( operator ) {\r\n        case SIMPLE_RESULT:\r\n            o = \"=\";\r\n            break;\r\n        case SIMPLE_PLUS:\r\n            o = \"+\";\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            o = \"-\";\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            o = \"×\";\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            o = \"÷\";\r\n            break;\r\n        default:\r\n            o = \"\";\r\n    }\r\n\r\n    return o;\r\n};\r\n\r\nexport const getResult = (  firstNumber, lastNumber, firstOperator ) =>{\r\n\r\n    let result = 0;\r\n    switch ( firstOperator ) {\r\n\r\n        case SIMPLE_PLUS:\r\n            result = roundNum( firstNumber + lastNumber );\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            result = roundNum( firstNumber - lastNumber );\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            result = roundNum( firstNumber * lastNumber );\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            result = roundNum( firstNumber / lastNumber );\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return result.toString().replace( \".\", \",\");\r\n};\r\n\r\nexport const roundNum = (nm )=>{\r\n    return nm.toFixed( 17 ) * 1 /* exclude excess zeros*/;\r\n};\r\n/**\r\n * Prepares a number for output in the main current number field\r\n *\r\n * @param base - perhaps the first part of the number ( before the separator )\r\n * @param arg - enter digit\r\n * @param dot - separator flag\r\n * @returns {string} the result is in string format\r\n */\r\nexport const getOutput = ( base, arg, dot = false ) =>{\r\n    if( base.includes( \",\" )  ) {\r\n        dot = false;\r\n    }\r\n    if( dot )\r\n        return  `${ base.toString() },${ arg }`;\r\n    else\r\n        return  base === '0' ? `${ arg}` : `${base}${arg}`;\r\n};\r\n\r\n\r\n/**\r\n *  Called when it is necessary to wrap a number in the text\r\n *  of the calculator log in any special text structure,\r\n *  such \"wrapping\" can be multiple\r\n *\r\n *  Вызывается при необходимости обернуть число в тексте лога\r\n *  калькулятора в какую либо специальную текстовую контструкцию,\r\n *  такое \"обертывание\" может быть множественным\r\n * @param expression a string expression (ex 'negate( xx )' ) or a number\r\n  * @param wrapText\r\n * @returns {string}\r\n */\r\nexport const wrapperArg = ( expression, wrapText ) => `${wrapText}( ${ toDisplayText( expression ).trim() } )`;\r\n\r\nexport const flatDeep = ( arr, d = Infinity )=>{\r\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\r\n        : arr.slice();\r\n};\r\n\r\n/**\r\n *\r\n * @param argWrap commonly arrLogText[ 0 ]\r\n * @param verificationNumber\r\n * @returns {*} String\r\n */\r\nexport const argumentOfWrap =  (argWrap, verificationNumber ) => wasWrapped( argWrap ) ? argWrap : toDisplayText( verificationNumber );\r\n\r\n\r\n/**\r\n * Анализирует последнюю ячейку массива лога, если кол-во ячеек нечетное,\r\n * то в последней ячейке содержится либо число, либо \"обернутое\" выражение,\r\n * тогда она извлекается из массива, оборачивается в требуемое выражение\r\n * и затем включается в последовательность лога. Иначе, если последняя часть\r\n * массива лога - оператор ( +, -... ), в последовательность лога включается\r\n * сообщенный второй аргумент, чаще всего это число из переменной firstNumber или\r\n * lastNumber\r\n *\r\n * @param arrLog\r\n * @param nm\r\n * @param wrapText\r\n */\r\nexport const updateArrLogText = ( arrLog, nm, wrapText )=>{\r\n\r\n    let firstArgument = '';\r\n    let secondArgument = '';\r\n\r\n    if( arrLog.length > 1 && arrLog.length%2 ){\r\n        firstArgument = arrLog.slice( 0, -1 );\r\n        secondArgument = wrapperArg( arrLog.pop(), wrapText );\r\n    } else {\r\n        firstArgument = arrLog;\r\n        secondArgument = wrapperArg( toDisplayText( nm ), wrapText );\r\n    }\r\n\r\n    return getArrLogText( firstArgument, secondArgument );\r\n\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param typeOperation\r\n * @returns {{cOperation: (function(*): number), wrapText: string}}\r\n */\r\nexport const getComplexesAttributes = (typeOperation )=>{\r\n    let attributes = {};\r\n\r\n    switch ( typeOperation ) {\r\n        case COMPLEXES_DIVISION_X:\r\n            ///FIXME: а если имя функции указать строковым значением изменит ли это тип функции с [ Function cOperation ]?\r\n            attributes = { cOperation: ( val )=> 1/val, wrapText: '1/' };\r\n            break;\r\n        case COMPLEXES_SQR_X:\r\n            attributes = { cOperation: ( val )=> Math.pow( val, 2 ), wrapText: 'sqr' };\r\n            break;\r\n        case COMPLEXES_SQRT_X:\r\n            attributes = { cOperation: ( val )=> Math.sqrt( val ), wrapText: '√' };\r\n            break;\r\n        default:\r\n            throw Error( 'Unknown typeOperation received');\r\n    }\r\n\r\n    return attributes;\r\n\r\n\r\n};\r\n\r\nexport const wasWrapped = ( expression )=>{\r\n    const operators = [ '+'\r\n                        , '-'\r\n                        , '×'\r\n                        , '÷'\r\n                        , '='\r\n                        , 'simpleMinus'\r\n                        , 'simplePlus'\r\n                        , 'simpleMultiply'\r\n                        , 'simpleDivision'\r\n                        , 'simpleResult'\r\n                        ];\r\n    return expression !== undefined && isNaN( expression ) && operators.indexOf( expression ) === - 1;\r\n};\r\n","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, toDisplayText, toFloat, updateArrLogText, wrapperArg} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                })=>{\r\n\r\n    onDot = false;\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n        /// если в первой ячейке массива лога содержится выражение, напр 1/(10)\r\n        if( arrLogText[ 0 ] !== undefined && isNaN( arrLogText[ 0 ] ) ){\r\n            arrLogText = getArrLogText( wrapperArg( arrLogText[ 0 ], 'negate' ) );\r\n        }\r\n        firstNumber *= -1;\r\n        displayText = toDisplayText( firstNumber );\r\n        //percentNumber = firstNumber;\r\n        //arrLogText = [];\r\n    } else if( mode === MODES.FIRST_OPERATOR ) {\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n        lastNumber = firstNumber * -1;\r\n        arrLogText = getArrLogText(  firstNumber, firstOperator, wrapperArg( displayText, 'negate' ) );\r\n        displayText = toDisplayText( lastNumber );\r\n    } else if( mode === MODES.MULTIPLE_ACTION ) {\r\n        lastNumber = toFloat( displayText ) * -1;\r\n        arrLogText = updateArrLogText( arrLogText, displayText, 'negate');\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = toFloat( displayText ) * -1;\r\n\r\n        const expression = arrLogText.length > 1 ? displayText : arrLogText[ 0 ];\r\n        arrLogText = getArrLogText( ` ${ wrapperArg( expression, 'negate' ) } ` );\r\n        displayText = toDisplayText( firstNumber );\r\n    } else if( mode === MODES.LAST_NUMBER ) {\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, 'negate');\r\n        lastNumber *= -1;\r\n        displayText = toDisplayText( lastNumber );\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {MODES, NOT_OPERATOR, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getOutput, toDisplayText, toFloat, wasWrapped} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = value;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        arrLogText = store.arrLogText;\r\n        displayText = getOutput( '', value, onDot );\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR  ){\r\n        displayText = getOutput( lastNumber.toString(), value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.MULTIPLE_ACTION ){\r\n\r\n        // Нам нужно установить является ли число которое мы хотим поправить\r\n        // \"обернутым\", но мы не знаем что хранится в последней ячейке массива\r\n        // лога, ранее введенные цифры или знак арифм. действия ( если число только\r\n        // начало формироваться), зная, что операторы всегда хранятся в четных ячейках\r\n        // проверяем является ли последняя ячейка нечетной, если да - там хранится число\r\n        // которое можно проверять на \"обернутость\"\r\n        if( arrLogText.length%2 && isNaN( toFloat(  arrLogText[ arrLogText.length - 1] )) ){\r\n            lastNumber = value;\r\n            displayText =lastNumber.toString();\r\n            arrLogText = getArrLogText( arrLogText.slice( 0, -1 ) );\r\n        } else {\r\n            displayText = getOutput( lastNumber.toString(), value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.LAST_NUMBER ){\r\n        /// если к числу был применен сложный оператор\r\n        if(  numberIsWrapped ){\r\n\r\n            displayText = toDisplayText( value );\r\n            lastNumber = value;\r\n            if( wasWrapped( arrLogText[ arrLogText.length - 1] ) )\r\n                                                        arrLogText.pop();\r\n        }else{\r\n            displayText = getOutput( displayText, value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n    } else {\r\n        if( firstOperator === SIMPLE_RESULT ){\r\n            firstNumber = value;\r\n            displayText = toDisplayText( firstNumber );\r\n            firstOperator = NOT_OPERATOR;\r\n\r\n        } else {/// mode < MODES.FIRST_OPERATOR\r\n            /// если к числу был применен сложный оператор\r\n            if(  numberIsWrapped ){\r\n                displayText = toDisplayText( value );\r\n                firstNumber = value;\r\n\r\n            } else {\r\n                displayText = getOutput( displayText, value, onDot );\r\n                firstNumber = toFloat( displayText );\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ///FIXME: Везде отменить onDOT = false, флаг должен обнуляться только в местах изменения числа\r\n    onDot = false;\r\n    numberIsWrapped = false;\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        displayText = store.displayText;\r\n        firstNumber = store.firstNumber;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n        percentNumber = store.percentNumber;\r\n\r\n    }\r\n\r\n    if( !displayText.includes( \",\" ) ){\r\n        onDot = true;\r\n        displayText = `${ displayText },`;\r\n    }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {argumentOfWrap, getArrLogText, getResult, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , numberIsWrapped\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n        onDot = false;\r\n        if( mode < MODES.MULTIPLE_ACTION  ){\r\n            displayText = toDisplayText( firstNumber );\r\n\r\n                let firstPart = '';\r\n                /// если попеременно нажимаются разные операторы\r\n                if( mode === MODES.FIRST_OPERATOR && arrLogText.length ){\r\n                    firstPart = arrLogText.slice( 0, -1 ) ;\r\n                } else {\r\n                    // если первый аргумент есть и он обернут выражение\r\n                    firstPart = argumentOfWrap( arrLogText[ 0 ], firstNumber );\r\n\r\n                }\r\n\r\n            arrLogText = getArrLogText( firstPart\r\n                , value );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        } else if(   mode === MODES.AFTER_RESULT ){\r\n            /// когда после получения результата был нажат backspace лог удаляется\r\n            const selectedNumber = arrLogText.length ? argumentOfWrap( arrLogText[ 0 ], firstNumber ) : firstNumber;\r\n            arrLogText = getArrLogText( selectedNumber\r\n                , value );\r\n\r\n            mode = MODES.FIRST_OPERATOR;\r\n        } else if(  mode !== MODES.MULTIPLE_ACTION ){\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            firstNumber = toFloat( displayText );\r\n\r\n            if( mode === MODES.LAST_NUMBER ){\r\n                /// в последовательности, например, 4, +, %, + сложится массив [ 4, +, 0,16, 0,16 ]\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                }\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, value);\r\n                mode = MODES.MULTIPLE_ACTION;\r\n            } else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , firstNumber\r\n                    , value\r\n                    , lastNumber\r\n                    , value );\r\n\r\n                mode = MODES.FIRST_OPERATOR;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        lastNumber = 0;\r\n        percentNumber = firstNumber;\r\n        firstOperator = value;\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES, SIMPLE_DIVISION, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getResult, argumentOfWrap, toFloat, toDisplayText, getSimpleOperator} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                    , divisionByZeroBlocking\r\n                })=>{\r\n\r\n\r\n        if( mode > MODES.FIRST_OPERATOR && firstOperator !== SIMPLE_RESULT ){\r\n\r\n            if( ( !lastNumber && mode < MODES.LAST_NUMBER ) || mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = toFloat( displayText );\r\n                mode = MODES.LAST_NUMBER;\r\n            }\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n\r\n            if( mode === MODES.AFTER_RESULT ){\r\n                     arrLogText = getArrLogText(  firstNumber\r\n                    , firstOperator\r\n                    , lastNumber\r\n                    , SIMPLE_RESULT );\r\n\r\n                firstNumber = toFloat( displayText );\r\n                percentNumber = firstNumber;\r\n                /// если произведено деление на ноль\r\n            } else if( mode === MODES.LAST_NUMBER\r\n                && firstOperator === SIMPLE_DIVISION\r\n                && lastNumber === 0 ){\r\n\r\n                displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n                divisionByZeroBlocking = true;\r\n            } else {\r\n                /// если после получения результата был нажат оператор процентов,\r\n                // то лог будет иметь иметь не \"стандартный\" вид,\r\n                // кол-во его ячеек будет нечетным т.к. в последней будет храниться число\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length > 1 && arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                } else if( arrLogText.length === 1 ){\r\n                    firstArgument = [ arrLogText[ 0 ], getSimpleOperator( firstOperator )];\r\n                    secondArgument = toDisplayText( lastNumber );\r\n                }\r\n\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, SIMPLE_RESULT);\r\n\r\n                firstNumber = toFloat( displayText );\r\n                mode = MODES.AFTER_RESULT;\r\n                percentNumber = firstNumber;\r\n            }\r\n\r\n\r\n\r\n        } else if( mode === MODES.FIRST_OPERATOR ) {\r\n            lastNumber = toFloat( displayText );\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            arrLogText = getArrLogText( argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , firstOperator\r\n                , lastNumber\r\n                , SIMPLE_RESULT );\r\n            firstNumber = toFloat( displayText );\r\n            mode = MODES.AFTER_RESULT;\r\n            percentNumber = firstNumber;\r\n        } else {\r\n            firstOperator = SIMPLE_RESULT;\r\n            arrLogText = getArrLogText( firstNumber, firstNumber === 0 ? '' : SIMPLE_RESULT );\r\n            percentNumber = firstNumber;\r\n        }\r\n\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , divisionByZeroBlocking\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","import {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, MODES} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                }, { type, value /*action*/})=>{\r\n\r\n    switch ( value ) {\r\n\r\n        case MAIN_CLEAR:\r\n            displayText = store.displayText;\r\n            firstNumber = store.firstNumber;\r\n            lastNumber = store.lastNumber;\r\n            mode = store.mode;\r\n            firstOperator = store.firstOperator;\r\n            arrLogText = store.arrLogText;\r\n            percentNumber = store.percentNumber;\r\n\r\n            break;\r\n\r\n        case MAIN_CLEAR_LAST:\r\n\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = store.firstNumber;\r\n                lastNumber = store.lastNumber;\r\n                mode = store.mode;\r\n                firstOperator = store.firstOperator;\r\n                arrLogText = store.arrLogText;\r\n                percentNumber = store.percentNumber;\r\n            }\r\n            else{\r\n                lastNumber = store.lastNumber;\r\n            }\r\n\r\n            displayText = store.displayText;\r\n\r\n            break;\r\n        case MAIN_BACKSPACE:\r\n            if( displayText !== \"0\" ){\r\n                if( mode < MODES.AFTER_RESULT ){\r\n                    displayText = displayText.slice( 0, -1 ) || \"0\";\r\n\r\n                    if( mode < MODES.LAST_NUMBER )\r\n                    {\r\n                        firstNumber = toFloat( displayText );\r\n                    }\r\n                    else\r\n                        lastNumber =  toFloat( displayText );\r\n                }else {\r\n                    firstNumber = toFloat( displayText );\r\n                    arrLogText = [];\r\n                }\r\n            }\r\n            break;\r\n\r\n        default:\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nimport {DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES} from \"../../constants\";\r\nimport {\r\n    argumentOfWrap,\r\n    getArrLogText,\r\n    getComplexesAttributes,\r\n    toDisplayText,\r\n    toFloat,\r\n    updateArrLogText,\r\n    wrapperArg\r\n} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                    , divisionByZeroBlocking\r\n                }, { type, value /*action*/})=>{\r\n\r\n    const { cOperation, wrapText } = getComplexesAttributes( value );\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText(\r\n            wrapperArg(\r\n                argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , wrapText)\r\n        );\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText( arrLogText, wrapperArg( firstNumber,wrapText));\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            mode = MODES.LAST_NUMBER;\r\n        }\r\n\r\n    } else if( mode === MODES.LAST_NUMBER ){\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, wrapText);\r\n        if( lastNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.MULTIPLE_ACTION ){\r\n        arrLogText = updateArrLogText( arrLogText, displayText, wrapText);\r\n\r\n        if( toFloat( displayText ) === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( toFloat( displayText ) );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n\r\n        arrLogText = arrLogText.length > 1 ? [ wrapperArg( firstNumber, wrapText) ]\r\n                                           : [ wrapperArg( arrLogText[ 0 ],wrapText) ];\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    }\r\n\r\n    numberIsWrapped = true;\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n        , divisionByZeroBlocking\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, roundNum, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                })=>{\r\n\r\n        onDot = false;\r\n\r\n        if( mode === MODES.BEGIN_MODE ){\r\n            firstNumber = 0;\r\n            displayText = toDisplayText( firstNumber );\r\n            arrLogText = getArrLogText( firstNumber );\r\n        } else if ( mode === MODES.FIRST_OPERATOR ){\r\n            lastNumber = roundNum( firstNumber * ( percentNumber / 100 ) );\r\n            mode = MODES.LAST_NUMBER;\r\n            arrLogText = getArrLogText( arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            percentNumber = firstNumber;\r\n            numberIsWrapped = true;\r\n        } else if ( mode === MODES.LAST_NUMBER ){\r\n            lastNumber = roundNum( lastNumber * ( percentNumber / 100 ) );\r\n\r\n            // если и последующие нажатие на кнопку проценты, значит вторая цифра уже выведена в лог\r\n            // ее надо заменить, если первое то лог заканчивается еще пока последним оператором\r\n            arrLogText = getArrLogText( arrLogText.length%2 ? arrLogText.slice( 0, -1 ) : arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            numberIsWrapped = true;\r\n        } else if ( mode === MODES.AFTER_RESULT ){\r\n            displayText = toDisplayText( roundNum( toFloat( displayText ) * ( percentNumber / 100 ) ) );\r\n            firstNumber = toFloat( displayText );\r\n            arrLogText = getArrLogText( displayText );\r\n            //lastNumber = 0;\r\n        }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nimport {MEMORY_CLEAR, MEMORY_LIST, MEMORY_MINUS, MEMORY_PLUS, MEMORY_READ, MEMORY_SAVE, MODES} from \"../../constants\";\r\nimport {toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrMemory\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , numberIsWrapped\r\n                }, { type, value /*action*/})=>{\r\n\r\n    numberIsWrapped = true;\r\n\r\n    switch ( value ) {\r\n\r\n        case MEMORY_CLEAR:\r\n            arrMemory = [];\r\n            numberIsWrapped = false;\r\n            break;\r\n        case MEMORY_READ:\r\n            const val = arrMemory[ arrMemory.length - 1 ];\r\n            displayText = toDisplayText( val );\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = val;\r\n            } else {\r\n                lastNumber = val;\r\n            }\r\n\r\n            break;\r\n        case MEMORY_PLUS:\r\n            if( arrMemory.length ){\r\n                arrMemory[ arrMemory.length - 1 ] +=  toFloat( displayText );\r\n            }else {\r\n                arrMemory.push( toFloat( displayText ));\r\n            }\r\n            break;\r\n        case MEMORY_MINUS:\r\n            if( arrMemory.length ){\r\n                arrMemory[ arrMemory.length - 1 ] -= toFloat( displayText );\r\n            } else {\r\n                arrMemory.push( toFloat( displayText ));\r\n            }\r\n            break;\r\n        case MEMORY_SAVE:\r\n            arrMemory.push( toFloat( displayText ));\r\n            break;\r\n        case MEMORY_LIST:\r\n\r\n            break;\r\n\r\n        default:\r\n            throw new Error( \"Unknown type memory option in the servantMemory \");\r\n    }\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        arrLogText = [];\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrMemory\r\n        , arrLogText\r\n        , percentNumber\r\n        , numberIsWrapped\r\n    };\r\n\r\n}","// import { combineReducers } from 'redux';\r\n// import setNumber from \"./setNumber\";\r\nimport {\r\n    MODES,\r\n    NOT_OPERATOR,\r\n    ON_CLICK_COMPLEXES,\r\n    ON_CLICK_DOT,\r\n    ON_CLICK_MAIN, ON_CLICK_MEMORY,\r\n    ON_CLICK_NUMBER,\r\n    ON_CLICK_PERCENT,\r\n    ON_CLICK_RESULT,\r\n    ON_CLICK_SIGN,\r\n    ON_CLICK_SIMPLE_OPERATOR\r\n} from \"../constants\";\r\nimport servantOnSign from \"./servants/servantOnSign\";\r\nimport servantClickNumber from \"./servants/servantClickNumber\";\r\nimport servantOnDot from \"./servants/servantOnDot\";\r\nimport servantSimpleOperator from \"./servants/servantSimpleOperator\";\r\nimport servantResult from \"./servants/servantResult\";\r\nimport servantMain from \"./servants/servantMain\";\r\nimport servantComplexes from \"./servants/servantComplexes\";\r\nimport servantPercentOperator from \"./servants/servantPercentOperator\";\r\nimport servantMemory from \"./servants/servantMemory\";\r\n\r\n// export default combineReducers({ setNumber });\r\n\r\nexport const store = {\r\n     displayText: \"0\"\r\n    , firstNumber: 0\r\n    , lastNumber: 0\r\n    , mode: MODES.BEGIN_MODE\r\n    , firstOperator: NOT_OPERATOR\r\n    , onDot: false\r\n    , percentNumber: NaN\r\n    , divisionByZeroBlocking: false\r\n    , arrMemory: []\r\n    , arrLogText: []\r\n    , numberIsWrapped: false\r\n\r\n};\r\n\r\nexport default function reducer ( state = store, action ) {\r\n\r\n    if ( state.divisionByZeroBlocking ) state = { ...store };\r\n\r\n    // значение divisionByZeroBlocking устанавливается только в servantResult, по нему\r\n    // ориентируются только веб элементы меняя состояние disabled, нажатие любой активной\r\n    // кнопки меняет состояние divisionByZeroBlocking на false, никакие servant'ы, кроме\r\n    // servantResult, не используют его значение, поэтому в них не передается\r\n    state.divisionByZeroBlocking = false;\r\n\r\n    switch ( action.type ) {\r\n        case ON_CLICK_RESULT:\r\n            state = servantResult( state );\r\n            break;\r\n        case ON_CLICK_MAIN:\r\n            state = servantMain( state, action );\r\n            break;\r\n        case ON_CLICK_DOT:\r\n            state = servantOnDot( state, action );\r\n            break;\r\n        case ON_CLICK_SIGN:\r\n            state = servantOnSign( state );\r\n           break;\r\n        case ON_CLICK_NUMBER:\r\n            state = servantClickNumber( state, action );\r\n            break;\r\n        case ON_CLICK_SIMPLE_OPERATOR:\r\n            state = servantSimpleOperator( state, action );\r\n            break;\r\n        case ON_CLICK_COMPLEXES:\r\n            state = servantComplexes( state, action );\r\n            break;\r\n        case ON_CLICK_PERCENT:\r\n            state = servantPercentOperator( state );\r\n            break;\r\n        case ON_CLICK_MEMORY:\r\n            state = servantMemory( state, action  );\r\n            break;\r\n        default:\r\n\r\n    }\r\n    ///TODO: Перегнать графику в свг\r\n    ///TODO: Заменить инклюдес\r\n    ///TODO: Деление на нуль. Добавить текст: Деление на ноль невозможно\r\n    ///TODO: Оригинальный калькулятор имеет бОльшую высоту\r\n    ///TODO: Реализовать поведение панели при использовании \"сложных операторов\" как на 2020-10-10_14-57-46 ( в папке doc )\r\n    ///FIXME: Кнопки сложных операторов, а также кнопка +/-  и кнопки простых операторов неправильно обрабатывают дизейбл\r\n    ///FIXME: Урезать кол-во параметров передаваемых в серванты, ограничив используемыми\r\n    /////////////////////////////CONSOLE/////////////////////////////////////\r\n        ///TODO: Console log in the code \"INDEX_JS\" line 32\r\n        if( true ){\r\n            console.group( 'Console log in the code \"INDEX_JS\" line 32' );\r\n            //console.debug( 'state: ', state );\r\n            //console.debug( '( !buffer%1 ): ', ( !( buffer%1 ) ) );\r\n            console.table( state );\r\n            console.table( action );\r\n            //console.debug( 'this: ', this );\r\n            console.groupEnd();\r\n        }\r\n    /////////////////////////////END CONSOLE/////////////////////////////////\r\n\r\n    ///TODO: исправил поведение кнопок дисаблед\r\n\r\n    return  state;\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from \"./reducers/index\";\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {createStore} from 'redux';\r\n\r\n/**\r\n * Логирует все экшены и состояния после того, как они будут отправлены.\r\n */\r\n/*\r\nconst logger = store => next => action => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n\r\n    const act = { type: \"onClickNumber\", value: \"1\" };\r\n    let res = next( act );\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd(action.type);\r\n    return result;\r\n};\r\n\r\n\r\nconst store = createStore( reducer, composeWithDevTools( applyMiddleware( logger ) ) );\r\n*/\r\nconst store = createStore( reducer,\r\n                        window.__REDUX_DEVTOOLS_EXTENSION__\r\n                                && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nReactDOM.render(\r\n    <Provider store={ store  } >\r\n          <React.StrictMode>\r\n            <App />\r\n          </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}