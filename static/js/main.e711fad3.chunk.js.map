{"version":3,"sources":["calculator/Header.js","calculator/Output.js","constants.js","calculator/input_btns/NumsBoard.js","calculator/input_btns/SimpleOperators.js","calculator/input_btns/BtnResult.js","calculator/input_btns/BtnPercent.js","calculator/input_btns/MainBtns.js","calculator/input_btns/MemoryBtns.js","calculator/input_btns/ComplexesBtns.js","calculator/Input.js","App.js","serviceWorker.js","reducers/utils.js","reducers/servants/servantOnSign.js","reducers/servants/servantClickNumber.js","reducers/servants/servantOnDot.js","reducers/servants/servantSimpleOperator.js","reducers/servants/servantResult.js","reducers/servants/servantMain.js","reducers/servants/servantComplexes.js","reducers/index.js","index.js"],"names":["Header","className","id","disabled","connect","state","displayText","logText","arrLogText","join","props","parts","split","onMinus","parseInt","slice","len","length","abs","i","invert","reverse","trim","formatDisplayText","MODES","dispatch","clickNumber","v","type","value","clickSymbol","arg","onClick","MemoryBtns","Input","App","role","Boolean","window","location","hostname","match","getArrLogText","args","arr","flat","map","toString","replace","getSimpleOperator","filter","toFloat","parseFloat","toDisplayText","nm","operator","o","getResult","firstNumber","lastNumber","firstOperator","result","toFixed","getOutput","base","dot","includes","applyNegates","log","negates","mode","onDot","pop","store","createStore","action","servantResult","servantMain","servantOnDot","servantOnSign","servantClickNumber","servantSimpleOperator","servantComplexes","console","group","table","groupEnd","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e711fad3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            <div className=\"full_width\" id=\"control_panel\">\r\n                <h1 id=\"label_ctrl_panel\">Калькулятор</h1>\r\n                <fieldset id=\"field_controls\">\r\n                    <button className=\"main_controls\" id=\"min_btn\" disabled={true}/>\r\n                    <button className=\"main_controls\" id=\"max_btn\" disabled={true}/>\r\n                    <button className=\"main_controls\" id=\"close_btn\" disabled={true}/>\r\n                </fieldset>\r\n            </div>\r\n            <div className=\"full_width\" id=\"dashboard\">\r\n                <button className=\"subtitle_controls\" id=\"menu_btn\" disabled={true}/>\r\n                <h2 id=\"subitile_ordinary\">Обычный</h2>\r\n                <button className=\"subtitle_controls\" id=\"stick_btn\" disabled={true}/>\r\n                <button className=\"subtitle_controls\" id=\"journal_btn\" disabled={true}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction Output( props ) {\r\n\r\n    const formatDisplayText = ( displayText )=>{\r\n\r\n        const parts = displayText.split( ',');\r\n        let onMinus = false;\r\n\r\n        if( parseInt( parts[ 0 ] ) < 0 ){\r\n            onMinus = true;\r\n            parts[ 0 ] = parts[ 0 ].slice( 1 );\r\n        }\r\n\r\n\r\n        const len = parts[ 0 ].length;\r\n        let abs = \"\";\r\n\r\n        for (let i = len -1; i >= 0; i--) {\r\n            abs += ( len - i )%3?parts[ 0 ][ i ]: `${ parts[ 0 ][ i ] } `;\r\n        }\r\n\r\n        const invert = abs.split('').reverse();\r\n        parts[ 0 ] = invert.join('').trim();\r\n\r\n        return `${ onMinus? \"-\": ''}${parts.join(\",\")}`;\r\n    };\r\n\r\n    return(\r\n        <section className=\"full_width\" id=\"output\">\r\n            <div className=\"full_width\" id=\"progress\">\r\n                <button className=\"progress_arrows\" id=\"left_progress_arrow\"/>\r\n                <p id=\"progress_content\">{ props.logText }</p>\r\n                <button className=\"progress_arrows\" id=\"right_progress_arrow\"/>\r\n            </div>\r\n            <div className=\"full_width\" id=\"viewer\">\r\n                <blockquote>\r\n                    <p id=\"viewport\">{formatDisplayText( props.displayText )}</p>\r\n                </blockquote>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    \r\n    state => {\r\n        return ({\r\n                displayText: state.displayText\r\n                , logText: state.arrLogText.join( ' ' )\r\n\r\n        });\r\n    }, null\r\n)( Output );","/// action names\r\nexport const ON_CLICK_NUMBER = \"onClickNumber\";\r\nexport const ON_CLICK_DOT = \"onClickDot\";\r\nexport const ON_CLICK_SIGN = \"onClickSign\";\r\nexport const ON_CLICK_SIMPLE_OPERATOR = \"onClickSimpleOperator\";\r\nexport const ON_CLICK_RESULT = \"onClickResult\";\r\nexport const ON_CLICK_MAIN = \"onClickMain\";\r\nexport const ON_CLICK_COMPLEXES = \"onClickComplexes\";\r\n\r\n\r\n/// simple operators\r\nexport const SIMPLE_MINUS = \"simpleMinus\";\r\nexport const SIMPLE_PLUS = \"simplePlus\";\r\nexport const SIMPLE_MULTIPLY = \"simpleMultiply\";\r\nexport const SIMPLE_DIVISION = \"simpleDivision\";\r\nexport const SIMPLE_RESULT = \"simpleResult\";\r\n\r\n/// main operators\r\nexport const MAIN_BACKSPACE = \"mainBackspace\";\r\nexport const MAIN_CLEAR = \"mainClear\";\r\nexport const MAIN_CLEAR_END = \"mainClearEnd\";\r\n\r\n/// complexes operators\r\nexport const COMPLEXES_DIVISION_X = \"complexesDevisionX\";\r\n\r\n/// modes set\r\n\r\nexport const MODES = {\r\n    BEGIN_MODE: 0\r\n    , FIRST_OPERATOR: 1\r\n    , MULTIPLE_ACTION: 2\r\n    , LAST_NUMBER: 3\r\n    , AFTER_RESULT: 4\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_DOT, ON_CLICK_NUMBER, ON_CLICK_SIGN} from \"../../constants\";\r\n\r\nconst NumsBoard = ( props ) => {\r\n\r\n    return(\r\n        <fieldset id=\"fieldset_num_btns\">\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 7 )}>7</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 8 )}>8</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 9 )}>9</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 4 )}>4</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 5 )}>5</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 6 )}>6</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 1 )}>1</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 2 )}>2</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 3 )}>3</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_plus_minus\" onClick={ () => props.clickSymbol( )}/>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_zerro\" onClick={ () => props.clickNumber( 0 )}>0</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_dote\" onClick={ () => props.clickSymbol( \".\" )}>,</button>\r\n        </fieldset>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(\r\n   null,\r\n    dispatch => ({\r\n        clickNumber: ( v ) => {\r\n            dispatch( {type: ON_CLICK_NUMBER, value: v })\r\n        }\r\n        , clickSymbol: ( arg ) => {\r\n            arg ? dispatch( {type: ON_CLICK_DOT })\r\n                : dispatch( {type: ON_CLICK_SIGN })\r\n        }\r\n    })\r\n)( NumsBoard );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_SIMPLE_OPERATOR, SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS} from \"../../constants\";\r\n\r\nconst SimpleOperators = ( props )=>{\r\n\r\n    return(\r\n        <fieldset id=\"fieldset_simple_btns\">\r\n            <button className=\"input_btns\" id=\"btn_division\" onClick={ () => props.onClick( SIMPLE_DIVISION )} />\r\n            <button className=\"input_btns\" id=\"btn_multiply\" onClick={ () => props.onClick( SIMPLE_MULTIPLY )} />\r\n            <button className=\"input_btns\" id=\"btn_minus\" onClick={ () => props.onClick( SIMPLE_MINUS )} />\r\n            <button className=\"input_btns\" id=\"btn_plus\" onClick={ () => props.onClick( SIMPLE_PLUS )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( SimpleOperators);","import {ON_CLICK_RESULT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnResult = ( props )=>{\r\n\r\n    return(\r\n        < fieldset >\r\n            <button className=\"input_btns\" id=\"btn_result\" onClick={ () => props.onClick( )} />\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( ) => {\r\n            dispatch( {type: ON_CLICK_RESULT })\r\n        }\r\n    })\r\n)( BtnResult);","import {ON_CLICK_SIMPLE_OPERATOR} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnPercent = ( props )=>{\r\n\r\n    return(\r\n        <fieldset id=\"fieldset_percent\">\r\n            <button className=\"input_btns\" id=\"btn_percent\">%</button>\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( BtnPercent);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_END, ON_CLICK_MAIN} from \"../../constants\";\r\n\r\nconst MainBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset id=\"main_btns\">\r\n            <button className=\"input_btns\" id=\"btn_ce\" onClick={ () => props.onClick( MAIN_CLEAR_END ) }>CE</button>\r\n            <button className=\"input_btns\" id=\"btn_c\" onClick={ () => props.onClick( MAIN_CLEAR ) } >C</button>\r\n            <button className=\"input_btns\" id=\"btn_backspace\" onClick={ () => props.onClick( MAIN_BACKSPACE ) } />\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MAIN, value: v })\r\n        }\r\n    })\r\n)( MainBtns);","import React from \"react\";\r\n\r\nconst MemoryBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"input_fieldsets\">\r\n            <button className=\"mm_btns\">MC</button>\r\n            <button className=\"mm_btns\">MR</button>\r\n            <button className=\"mm_btns\">M+</button>\r\n            <button className=\"mm_btns\">M-</button>\r\n            <button className=\"mm_btns\">MS</button>\r\n            <button className=\"mm_btns\">M<sup id=\"down_arrow\">▼</sup></button>\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default MemoryBtns;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {COMPLEXES_DIVISION_X, ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst ComplexesBtns = ( props )=>{\r\n\r\n    return(\r\n        <fieldset id=\"fieldset_complexes_btns\">\r\n            <button className=\"input_btns\" id=\"btn_one_x\" onClick={ () => props.onClick( COMPLEXES_DIVISION_X )} />\r\n            <button className=\"input_btns\" id=\"btn_x2\" />\r\n            <button className=\"input_btns\" id=\"btn_2x\" />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( ComplexesBtns);","import React from \"react\";\r\nimport NumsBoard from \"./input_btns/NumsBoard\";\r\nimport SimpleOperators from \"./input_btns/SimpleOperators\";\r\nimport BtnResult from \"./input_btns/BtnResult\";\r\nimport BtnPercent from \"./input_btns/BtnPercent\";\r\nimport MainBtns from \"./input_btns/MainBtns\";\r\nimport MemoryBtns from \"./input_btns/MemoryBtns\";\r\nimport ComplexesBtns from \"./input_btns/ComplexesBtns\";\r\n\r\nconst Input = () => {\r\n    return(\r\n        <section className=\"full_width\" id=\"input\">\r\n            <MemoryBtns/>\r\n            <section className=\"input_fieldsets\">\r\n                <BtnPercent/>\r\n                <MainBtns />\r\n                <ComplexesBtns/>\r\n                <NumsBoard />\r\n                <SimpleOperators />\r\n                <BtnResult/>\r\n            </section>\r\n        </section>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Header from \"./calculator/Header\";\r\nimport Output from \"./calculator/Output\";\r\nimport Input from \"./calculator/Input\";\r\n\r\n///FIXME: need reconfigure package.json, this don't have flat() and includes()\r\nfunction App() {\r\n  return (\r\n            <main role=\"main\" className={\"App active\"}>\r\n                <Header />\r\n                <Output />\r\n                <Input />\r\n            </main>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS, SIMPLE_RESULT} from \"../constants\";\r\n\r\nexport const getArrLogText = ( ...args ) =>{\r\n\r\n    let arr = args.flat( 10 ).map( v => {\r\n        let res =\"\";\r\n        if( typeof v === \"number\" )\r\n            res = v.toString().replace( \".\", \",\");\r\n        else\r\n            res = getSimpleOperator( v );\r\n\r\n        if( res ) return res;\r\n        return v;\r\n    });\r\n\r\n    return arr.filter( v => v !== \"\" );\r\n};\r\n\r\nexport const toFloat = (displayText )=> {\r\n    return parseFloat(  displayText.replace( \",\", '.'));\r\n};\r\n\r\nexport const toDisplayText = ( nm )=>{\r\n\r\n    return nm.toString().replace( \".\", \",\");\r\n};\r\nexport const getSimpleOperator = (operator )=>{\r\n\r\n    let o = '';\r\n    switch ( operator ) {\r\n        case SIMPLE_RESULT:\r\n            o = \"=\";\r\n            break;\r\n        case SIMPLE_PLUS:\r\n            o = \"+\";\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            o = \"-\";\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            o = \"×\";\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            o = \"÷\";\r\n            break;\r\n        default:\r\n            o = \"\";\r\n    }\r\n\r\n    return o;\r\n};\r\nexport const getResult = (  firstNumber, lastNumber, firstOperator ) =>{\r\n\r\n    let result = 0;\r\n    switch ( firstOperator ) {\r\n\r\n        case SIMPLE_PLUS:\r\n            result = ( firstNumber + lastNumber ).toFixed( 10 ) * 1 /* exclude excess zeros*/;\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            result = ( firstNumber - lastNumber ).toFixed( 10 ) * 1 /* exclude excess zeros*/;\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            result = ( firstNumber * lastNumber ).toFixed( 10 ) * 1 /* exclude excess zeros*/;\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            result = ( firstNumber / lastNumber ).toFixed( 10 ) * 1 /* exclude excess zeros*/;\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return result.toString().replace( \".\", \",\");\r\n};\r\n\r\nexport const getOutput = ( base, arg, dot ) =>{\r\n    if( base.includes( \",\" )  ) {\r\n        dot = false;\r\n    }\r\n    if( dot )\r\n        return  `${ base.toString() },${ arg }`;\r\n    else\r\n        return  base === '0' ? `${ arg}` : `${base}${arg}`;\r\n};\r\n\r\nexport const applyNegates = ( nm, log )=>{\r\n    let negates = nm;\r\n\r\n    if( log && log.includes( 'negate')){\r\n        negates = `negate( ${ log } )`;\r\n    } else {\r\n        negates = `negate( ${ negates } )`;\r\n    }\r\n    return negates;\r\n};\r\n\r\n\r\n\r\n","import {MODES} from \"../../constants\";\r\nimport {applyNegates, getArrLogText, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n        \r\n        firstNumber *= -1;\r\n        displayText = toDisplayText( firstNumber );\r\n\r\n        if( firstNumber === 0 ){\r\n            arrLogText = getArrLogText(  arrLogText, applyNegates( firstNumber, arrLogText.pop() ));\r\n        } else{\r\n            arrLogText = [];\r\n        }\r\n    } else if( mode === MODES.FIRST_OPERATOR ) {\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n        lastNumber = firstNumber * -1;\r\n        arrLogText = getArrLogText(  firstNumber, firstOperator, applyNegates( displayText, arrLogText.pop() ) );\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n\r\n    } else if( mode === MODES.MULTIPLE_ACTION ) {\r\n        lastNumber = toFloat( displayText ) * -1;\r\n       /* arrLogText = getArrLogText(  arrLogText\r\n            , applyNegates(\r\n                displayText\r\n                , arrLogText[ arrLogText.length - 1].includes( 'negate')\r\n                    ? arrLogText.pop() : '') );*/\r\n         arrLogText = getArrLogText(  arrLogText\r\n             , firstOperator\r\n             , applyNegates(\r\n                 displayText\r\n                 ,  arrLogText.pop() ) );\r\n\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n            firstNumber = toFloat( displayText ) * -1;\r\n            arrLogText = getArrLogText( ` ${ applyNegates( displayText , arrLogText.pop() ) } ` );\r\n            displayText = toDisplayText( firstNumber );\r\n\r\n\r\n    } else if( mode === MODES.LAST_NUMBER ) {\r\n\r\n        lastNumber *= -1;\r\n        arrLogText = getArrLogText( arrLogText,  applyNegates( displayText , arrLogText.pop() )  );\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n        ///TODO: arrLogText.join( \" \" ) text-align = right\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, getOutput, toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = value;\r\n        lastNumber = store.lastNumber;\r\n        mode = MODES.BEGIN_MODE;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n        displayText = getOutput( '', value, onDot );\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR  ){\r\n        displayText = getOutput( lastNumber.toString(), value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.MULTIPLE_ACTION ){\r\n\r\n        if( arrLogText[ arrLogText.length - 1].includes( 'negate' )){\r\n            lastNumber = value;\r\n            displayText =lastNumber.toString();\r\n            arrLogText = getArrLogText( arrLogText.slice( 0, -1 ) );\r\n        } else {\r\n            displayText = getOutput( lastNumber.toString(), value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.LAST_NUMBER ){\r\n        displayText = getOutput( displayText, value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n    } else {\r\n        displayText = getOutput( displayText, value, onDot );\r\n        firstNumber = toFloat( displayText );\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        displayText = store.displayText;\r\n        firstNumber = store.firstNumber;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n\r\n    }\r\n\r\n    if( !displayText.includes( \",\" ) ){\r\n        onDot = true;\r\n        displayText = `${ displayText },`;\r\n    }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, getResult, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n        onDot = false;\r\n        if( mode === MODES.BEGIN_MODE\r\n            || mode === MODES.AFTER_RESULT\r\n            || mode === MODES.FIRST_OPERATOR ){\r\n            arrLogText = getArrLogText( firstNumber\r\n                , value );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        } else if(  mode !== MODES.MULTIPLE_ACTION ){\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            firstNumber = toFloat( displayText );\r\n\r\n            if( mode === MODES.LAST_NUMBER ){\r\n\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , lastNumber\r\n                    , value);\r\n\r\n                mode = MODES.MULTIPLE_ACTION;\r\n            } else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , firstNumber\r\n                    , value\r\n                    , lastNumber\r\n                    , value );\r\n\r\n                mode = MODES.FIRST_OPERATOR;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        firstOperator = value;\r\n        lastNumber = 0;\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","import {MODES, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getResult, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n\r\n        onDot = false;\r\n\r\n        if( mode > MODES.FIRST_OPERATOR && firstOperator !== SIMPLE_RESULT ){\r\n\r\n            if( ( !lastNumber && mode < MODES.LAST_NUMBER ) || mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = toFloat( displayText );\r\n                mode = MODES.LAST_NUMBER;\r\n            }\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n\r\n            if( mode === MODES.AFTER_RESULT ){\r\n\r\n                arrLogText = getArrLogText( firstNumber\r\n                    , firstOperator\r\n                    , lastNumber\r\n                    , SIMPLE_RESULT );\r\n            }\r\n            else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , arrLogText[ arrLogText.length - 1 ].includes( 'negate') ? '' : lastNumber\r\n                    , SIMPLE_RESULT);\r\n            }\r\n\r\n            firstNumber = toFloat( displayText );\r\n            mode = MODES.AFTER_RESULT;\r\n\r\n        } else {\r\n\r\n            firstNumber = toFloat( displayText );\r\n            firstOperator = SIMPLE_RESULT;\r\n            arrLogText = getArrLogText( firstNumber, firstOperator );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","import {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_END, MODES} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n    onDot = false;\r\n\r\n    switch ( value ) {\r\n\r\n        case MAIN_CLEAR:\r\n\r\n            displayText = store.displayText;\r\n            displayText = store.displayText;\r\n            firstNumber = store.firstNumber;\r\n            lastNumber = store.lastNumber;\r\n            mode = store.mode;\r\n            firstOperator = store.firstOperator;\r\n            onDot = store.onDot;\r\n            arrLogText = store.arrLogText;\r\n\r\n            break;\r\n\r\n        case MAIN_CLEAR_END:\r\n\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = store.firstNumber;\r\n                lastNumber = store.lastNumber;\r\n                mode = store.mode;\r\n                firstOperator = store.firstOperator;\r\n                onDot = store.onDot;\r\n                arrLogText = store.arrLogText;\r\n            }\r\n            else{\r\n                lastNumber = store.lastNumber;\r\n            }\r\n\r\n            displayText = store.displayText;\r\n\r\n            break;\r\n        case MAIN_BACKSPACE:\r\n            if( displayText !== \"0\" ){\r\n                if( mode < MODES.AFTER_RESULT ){\r\n                    displayText = displayText.slice( 0, -1 ) || \"0\";\r\n\r\n                    if( mode < MODES.LAST_NUMBER )\r\n                        firstNumber = toFloat( displayText );\r\n                    else\r\n                        lastNumber =  toFloat( displayText );\r\n                }else {\r\n                    firstNumber = toFloat( displayText );\r\n                    arrLogText = [];\r\n                }\r\n            }\r\n            break;\r\n\r\n        default:\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","export default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                }, { type, value /*action*/})=>{\r\n\r\n    onDot = false;\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n    };\r\n\r\n}","// import { combineReducers } from 'redux';\r\n// import setNumber from \"./setNumber\";\r\nimport {\r\n    MODES, ON_CLICK_COMPLEXES,\r\n    ON_CLICK_DOT, ON_CLICK_MAIN,\r\n    ON_CLICK_NUMBER,\r\n    ON_CLICK_RESULT,\r\n    ON_CLICK_SIGN,\r\n    ON_CLICK_SIMPLE_OPERATOR\r\n} from \"../constants\";\r\nimport servantOnSign from \"./servants/servantOnSign\";\r\nimport servantClickNumber from \"./servants/servantClickNumber\";\r\nimport servantOnDot from \"./servants/servantOnDot\";\r\nimport servantSimpleOperator from \"./servants/servantSimpleOperator\";\r\nimport servantResult from \"./servants/servantResult\";\r\nimport servantMain from \"./servants/servantMain\";\r\nimport servantComplexes from \"./servants/servantComplexes\";\r\n\r\n// export default combineReducers({ setNumber });\r\n\r\nexport const store = {\r\n     displayText: \"0\"\r\n    , firstNumber: 0\r\n    , lastNumber: 0\r\n    , mode: MODES.BEGIN_MODE\r\n    , firstOperator: null\r\n    , onDot: false\r\n    , arrLogText: []\r\n\r\n};\r\n\r\nexport default function reducer ( state = store, action ) {\r\n\r\n    switch ( action.type ) {\r\n        case ON_CLICK_RESULT:\r\n            state = servantResult( state, action );\r\n            break;\r\n        case ON_CLICK_MAIN:\r\n            state = servantMain( state, action );\r\n            break;\r\n        case ON_CLICK_DOT:\r\n            state = servantOnDot( state, action );\r\n            break;\r\n        case ON_CLICK_SIGN:\r\n            state = servantOnSign( state, action );\r\n           break;\r\n        case ON_CLICK_NUMBER:\r\n            state = servantClickNumber( state, action );\r\n            break;\r\n        case ON_CLICK_SIMPLE_OPERATOR:\r\n            state = servantSimpleOperator( state, action );\r\n            break;\r\n        case ON_CLICK_COMPLEXES:\r\n            state = servantComplexes( state, action );\r\n            break;\r\n        default:\r\n\r\n    }\r\n    ///TODO: Перегнать графику в свг\r\n    ///TODO: добавить полифил  для флэт https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\r\n    ///TODO: Заменить инклюдес\r\n    ///TODO: Проверить взаимодействие с кнопкой backspace\r\n    /////////////////////////////CONSOLE/////////////////////////////////////\r\n        ///TODO: Console log in the code \"INDEX_JS\" line 32\r\n        if( true ){\r\n            console.group( 'Console log in the code \"INDEX_JS\" line 32' );\r\n            //console.debug( 'state: ', state );\r\n            //console.debug( '( !buffer%1 ): ', ( !( buffer%1 ) ) );\r\n            console.table( state );\r\n            console.table( action );\r\n            //console.debug( 'this: ', this );\r\n            console.groupEnd();\r\n        }\r\n    /////////////////////////////END CONSOLE/////////////////////////////////\r\n\r\n    return  state;\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from \"./reducers/index\";\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {createStore} from 'redux';\r\n\r\n/**\r\n * Логирует все экшены и состояния после того, как они будут отправлены.\r\n */\r\n/*\r\nconst logger = store => next => action => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n\r\n    const act = { type: \"onClickNumber\", value: \"1\" };\r\n    let res = next( act );\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd(action.type);\r\n    return result;\r\n};\r\n\r\n\r\nconst store = createStore( reducer, composeWithDevTools( applyMiddleware( logger ) ) );\r\n*/\r\nconst store = createStore( reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nReactDOM.render(\r\n    <Provider store={ store  } >\r\n          <React.StrictMode>\r\n            <App />\r\n          </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}