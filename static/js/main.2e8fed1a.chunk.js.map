{"version":3,"sources":["calculator/Header.js","calculator/Output.js","constants.js","calculator/input_btns/NumsBoard.js","calculator/input_btns/SimpleOperators.js","calculator/input_btns/BtnResult.js","calculator/input_btns/BtnPercent.js","calculator/input_btns/MainBtns.js","calculator/input_btns/MemoryBtns.js","calculator/input_btns/ComplexesBtns.js","calculator/Input.js","App.js","serviceWorker.js","reducers/utils.js","reducers/servants/servantOnSign.js","reducers/servants/servantClickNumber.js","reducers/servants/servantOnDot.js","reducers/servants/servantSimpleOperator.js","reducers/servants/servantResult.js","reducers/servants/servantMain.js","reducers/servants/servantComplexes.js","reducers/servants/servantPercentOperator.js","reducers/index.js","index.js"],"names":["Header","className","id","disabled","connect","state","displayText","logText","arrLogText","join","isNaN","parts","split","onMinus","parseInt","slice","len","length","abs","i","invert","reverse","trim","formatDisplayText","MODES","divisionByZeroBlocking","dispatch","clickNumber","v","type","value","clickSymbol","arg","onClick","props","Input","App","role","Boolean","window","location","hostname","match","getArrLogText","args","arr","flatDeep","map","toDisplayText","getSimpleOperator","filter","toFloat","roundNum","parseFloat","replace","nm","toString","operator","o","getResult","firstNumber","lastNumber","firstOperator","result","toFixed","getOutput","base","dot","includes","wrapperArg","expression","wrapText","d","Infinity","reduce","acc","val","concat","Array","isArray","argumentOfWrap","argWrap","verificationNumber","undefined","updateArrLogText","arrLog","firstArgument","secondArgument","pop","mode","onDot","percentNumber","store","firstPart","selectedNumber","typeOperation","attributes","cOperation","Math","pow","sqrt","Error","getComplexesAttributes","NaN","createStore","action","servantResult","servantMain","servantOnDot","servantOnSign","servantClickNumber","servantSimpleOperator","servantComplexes","servantPercentOperator","console","group","table","groupEnd","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e8fed1a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            <div className=\"full_width\" id=\"control_panel\">\r\n                <h1 className=\"label_ctrl_panel\">Калькулятор</h1>\r\n                <fieldset id=\"field_controls\">\r\n                    <button className=\"main_controls min_btn\" disabled={true}/>\r\n                    <button className=\"main_controls max_btn\" disabled={true}/>\r\n                    <button className=\"main_controls close_btn\" disabled={true}/>\r\n                </fieldset>\r\n            </div>\r\n            <div className=\"full_width\" id=\"dashboard\">\r\n                <button className=\"subtitle_controls menu_btn\" disabled={true}/>\r\n                <h2 className=\"subitile_ordinary\">Обычный</h2>\r\n                <button className=\"subtitle_controls stick_btn\" disabled={true}/>\r\n                <button className=\"subtitle_controls journal_btn\" disabled={true}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction Output( {\r\n                     displayText\r\n                    , logText\r\n                 } ) {\r\n\r\n    const formatDisplayText = ( displayText )=>{\r\n        ///TODO: Сделать форматирование размера текста в зависимости от длинны\r\n\r\n        if( isNaN( displayText )){\r\n            return  displayText;\r\n        } else {\r\n            const parts = displayText.split( ',');\r\n            let onMinus = false;\r\n\r\n            if( parseInt( parts[ 0 ] ) < 0 ){\r\n                onMinus = true;\r\n                parts[ 0 ] = parts[ 0 ].slice( 1 );\r\n            }\r\n\r\n\r\n            const len = parts[ 0 ].length;\r\n            let abs = \"\";\r\n\r\n            for (let i = len -1; i >= 0; i--) {\r\n                abs += ( len - i )%3?parts[ 0 ][ i ]: `${ parts[ 0 ][ i ] } `;\r\n            }\r\n\r\n            const invert = abs.split('').reverse();\r\n            parts[ 0 ] = invert.join('').trim();\r\n\r\n            return `${ onMinus? \"-\": ''}${parts.join(\",\")}`;\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n    return(\r\n        <section className=\"full_width\">\r\n            <div className=\"full_width story_calc\">\r\n                <button className=\"progress_arrows left_progress_arrow\"/>\r\n                <p className=\"progress_content\">{ logText }</p>\r\n                <button className=\"progress_arrows right_progress_arrow\" />\r\n            </div>\r\n            <div className=\"full_width viewer_panel\" id=\"viewer\">\r\n                <blockquote>\r\n                    <p className=\"viewport\">{ formatDisplayText( displayText )}</p>\r\n                </blockquote>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    \r\n    state => {\r\n        return ({\r\n                displayText: state.displayText\r\n                , logText: state.arrLogText.join( ' ' )\r\n\r\n        });\r\n    }, null\r\n)( Output );","/// action names\r\nexport const ON_CLICK_NUMBER = \"onClickNumber\";\r\nexport const ON_CLICK_DOT = \"onClickDot\";\r\nexport const ON_CLICK_SIGN = \"onClickSign\";\r\nexport const ON_CLICK_SIMPLE_OPERATOR = \"onClickSimpleOperator\";\r\nexport const ON_CLICK_RESULT = \"onClickResult\";\r\nexport const ON_CLICK_MAIN = \"onClickMain\";\r\nexport const ON_CLICK_COMPLEXES = \"onClickComplexes\";\r\nexport const ON_CLICK_PERCENT = \"onClickPercent\";\r\n\r\n\r\n/// simple operators\r\nexport const SIMPLE_MINUS = \"simpleMinus\";\r\nexport const SIMPLE_PLUS = \"simplePlus\";\r\nexport const SIMPLE_MULTIPLY = \"simpleMultiply\";\r\nexport const SIMPLE_DIVISION = \"simpleDivision\";\r\nexport const SIMPLE_RESULT = \"simpleResult\";\r\n\r\n/// default value of the firstOperator var\r\nexport const NOT_OPERATOR = \"notOperator\";\r\n\r\n\r\n\r\n/// main operators\r\nexport const MAIN_BACKSPACE = \"mainBackspace\";\r\nexport const MAIN_CLEAR = \"mainClear\";\r\nexport const MAIN_CLEAR_LAST = \"mainClearLast\";\r\n\r\n/// complexes operators\r\nexport const COMPLEXES_DIVISION_X = \"complexesDivisionX\";\r\nexport const COMPLEXES_SQR_X = \"complexesSqrX\";\r\nexport const COMPLEXES_SQRT_X = \"complexesSqrtX\";\r\nexport const DIVISION_BY_ZERO_IS_NOT_POSSIBLE = \"Деление на ноль невозможно\";\r\n\r\n\r\n\r\n/// modes set\r\n\r\nexport const MODES = {\r\n    BEGIN_MODE: 0\r\n    , FIRST_OPERATOR: 1\r\n    , MULTIPLE_ACTION: 2\r\n    , LAST_NUMBER: 3\r\n    , AFTER_RESULT: 4\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_DOT, ON_CLICK_NUMBER, ON_CLICK_SIGN} from \"../../constants\";\r\n\r\nconst NumsBoard = ( {\r\n                        clickNumber\r\n                        , clickSymbol\r\n                        , divisionByZeroBlocking\r\n                    } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_num_btns\">\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 7 )}>7</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 8 )}>8</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 9 )}>9</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 4 )}>4</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 5 )}>5</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 6 )}>6</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 1 )}>1</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 2 )}>2</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () =>clickNumber( 3 )}>3</button>\r\n            <button className=\"input_btns nmr_btns btn_plus_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () =>clickSymbol( )}/>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_zerro\" onClick={ () =>clickNumber( 0 )}>0</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_dote\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => clickSymbol( \".\" )}>,</button>\r\n        </fieldset>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        clickNumber: ( v ) => {\r\n            dispatch( {type: ON_CLICK_NUMBER, value: v })\r\n        }\r\n        , clickSymbol: ( arg ) => {\r\n            arg ? dispatch( {type: ON_CLICK_DOT })\r\n                : dispatch( {type: ON_CLICK_SIGN })\r\n        }\r\n    })\r\n)( NumsBoard );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_SIMPLE_OPERATOR, SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS} from \"../../constants\";\r\n\r\nconst SimpleOperators = ( {\r\n                              onClick\r\n                              , divisionByZeroBlocking\r\n                          } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_simple_btns\">\r\n            <button className=\"input_btns btn_division\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_DIVISION )} />\r\n            <button className=\"input_btns btn_multiply\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MULTIPLY )} />\r\n            <button className=\"input_btns btn_minus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_MINUS )} />\r\n            <button className=\"input_btns btn_plus\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( SIMPLE_PLUS )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( SimpleOperators);","import {ON_CLICK_RESULT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnResult = ( {\r\n                        onClick\r\n                    } )=>{\r\n\r\n    return(\r\n        < fieldset >\r\n            <button className=\"input_btns btn_result\" onClick={ () => onClick( )} />\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( ) => {\r\n            dispatch( {type: ON_CLICK_RESULT })\r\n        }\r\n    })\r\n)( BtnResult);","import {ON_CLICK_PERCENT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnPercent = ( {\r\n                         onClick\r\n                        , divisionByZeroBlocking\r\n                     } )=>{\r\n    return(\r\n        <fieldset className=\"fieldset_percent\">\r\n            <button className=\"input_btns btn_percent\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( ) } >%</button>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_PERCENT, value: null })\r\n        }\r\n    })\r\n)( BtnPercent);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, ON_CLICK_MAIN} from \"../../constants\";\r\n\r\nconst MainBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"main_btns\">\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR_LAST ) }>CE</button>\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR ) } >C</button>\r\n            <button className=\"input_btns btn_backspace\"  onClick={ () => props.onClick( MAIN_BACKSPACE ) } />\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MAIN, value: v })\r\n        }\r\n    })\r\n)( MainBtns);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst MemoryBtns = ( {\r\n                         onClick\r\n                         , divisionByZeroBlocking\r\n                     } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"input_fieldsets\">\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>MC</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>MR</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>M+</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>M-</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>MS</button>\r\n            <button className=\"mm_btns\"\r\n                    disabled={ divisionByZeroBlocking || true }>M<sup className=\"down_arrow\">▼</sup></button>\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( MemoryBtns);\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X, ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst ComplexesBtns = ( {\r\n                            onClick\r\n                            , divisionByZeroBlocking\r\n                        } )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_complexes_btns\" disabled={ false }>\r\n            <button className=\"input_btns btn_one_x\"\r\n                    disabled={ divisionByZeroBlocking }\r\n                    onClick={ () => onClick( COMPLEXES_DIVISION_X )} />\r\n            <button className=\"input_btns btn_x2\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQR_X )} />\r\n            <button className=\"input_btns btn_2x\"\r\n                    disabled={ divisionByZeroBlocking  }\r\n                    onClick={ () => onClick( COMPLEXES_SQRT_X )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    state => {\r\n        return ({\r\n            divisionByZeroBlocking: state.divisionByZeroBlocking\r\n        });\r\n    },\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( ComplexesBtns);","import React from \"react\";\r\nimport NumsBoard from \"./input_btns/NumsBoard\";\r\nimport SimpleOperators from \"./input_btns/SimpleOperators\";\r\nimport BtnResult from \"./input_btns/BtnResult\";\r\nimport BtnPercent from \"./input_btns/BtnPercent\";\r\nimport MainBtns from \"./input_btns/MainBtns\";\r\nimport MemoryBtns from \"./input_btns/MemoryBtns\";\r\nimport ComplexesBtns from \"./input_btns/ComplexesBtns\";\r\n\r\nconst Input = () => {\r\n    return(\r\n        <section className=\"full_width input_section\" >\r\n            <MemoryBtns/>\r\n            <section className=\"input_fieldsets\">\r\n                <BtnPercent/>\r\n                <MainBtns />\r\n                <ComplexesBtns/>\r\n                <NumsBoard />\r\n                <SimpleOperators />\r\n                <BtnResult/>\r\n            </section>\r\n        </section>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Header from \"./calculator/Header\";\r\nimport Output from \"./calculator/Output\";\r\nimport Input from \"./calculator/Input\";\r\n\r\nfunction App() {\r\n  return (\r\n            <main role=\"main\" className={\"App active\"}>\r\n                <Header />\r\n                <Output />\r\n                <Input />\r\n            </main>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    COMPLEXES_DIVISION_X, COMPLEXES_SQR_X, COMPLEXES_SQRT_X,\r\n    SIMPLE_DIVISION,\r\n    SIMPLE_MINUS,\r\n    SIMPLE_MULTIPLY,\r\n    SIMPLE_PLUS,\r\n    SIMPLE_RESULT\r\n} from \"../constants\";\r\n\r\nexport const getArrLogText = ( ...args ) =>{\r\n\r\n    let arr = flatDeep( args ).map( v => {\r\n        let res =\"\";\r\n        if( typeof v === \"number\" )\r\n            res = toDisplayText( v );\r\n        else\r\n            res = getSimpleOperator( v );\r\n        if( res ) return res;\r\n        return v;\r\n    });\r\n\r\n    return arr.filter( v => v !== \"\" );\r\n};\r\n\r\nexport const toFloat = (displayText )=> {\r\n    return roundNum( parseFloat(  displayText.replace( \",\", '.')) );\r\n};\r\n\r\nexport const toDisplayText = ( nm )=>{\r\n\r\n    return nm.toString().replace( \".\", \",\");\r\n};\r\nexport const getSimpleOperator = (operator )=>{\r\n\r\n    let o = '';\r\n    switch ( operator ) {\r\n        case SIMPLE_RESULT:\r\n            o = \"=\";\r\n            break;\r\n        case SIMPLE_PLUS:\r\n            o = \"+\";\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            o = \"-\";\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            o = \"×\";\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            o = \"÷\";\r\n            break;\r\n        default:\r\n            o = \"\";\r\n    }\r\n\r\n    return o;\r\n};\r\n\r\nexport const getResult = (  firstNumber, lastNumber, firstOperator ) =>{\r\n\r\n    let result = 0;\r\n    switch ( firstOperator ) {\r\n\r\n        case SIMPLE_PLUS:\r\n            result = roundNum( firstNumber + lastNumber );\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            result = roundNum( firstNumber - lastNumber );\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            result = roundNum( firstNumber * lastNumber );\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            result = roundNum( firstNumber / lastNumber );\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return result.toString().replace( \".\", \",\");\r\n};\r\n\r\nexport const roundNum = (nm )=>{\r\n    return nm.toFixed( 17 ) * 1 /* exclude excess zeros*/;\r\n};\r\n/**\r\n * Prepares a number for output in the main current number field\r\n *\r\n * @param base - perhaps the first part of the number ( before the separator )\r\n * @param arg - enter digit\r\n * @param dot - separator flag\r\n * @returns {string} the result is in string format\r\n */\r\nexport const getOutput = ( base, arg, dot = false ) =>{\r\n    if( base.includes( \",\" )  ) {\r\n        dot = false;\r\n    }\r\n    if( dot )\r\n        return  `${ base.toString() },${ arg }`;\r\n    else\r\n        return  base === '0' ? `${ arg}` : `${base}${arg}`;\r\n};\r\n\r\n\r\n/**\r\n *  Called when it is necessary to wrap a number in the text\r\n *  of the calculator log in any special text structure,\r\n *  such \"wrapping\" can be multiple\r\n *\r\n *  Вызывается при необходимости обернуть число в тексте лога\r\n *  калькулятора в какую либо специальную текстовую контструкцию,\r\n *  такое \"обертывание\" может быть множественным\r\n * @param expression a string expression (ex 'negate( xx )' ) or a number\r\n  * @param wrapText\r\n * @returns {string}\r\n */\r\nexport const wrapperArg = ( expression, wrapText ) => `${wrapText}( ${ toDisplayText( expression ).trim() } )`;\r\n\r\nexport const flatDeep = ( arr, d = Infinity )=>{\r\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\r\n        : arr.slice();\r\n};\r\n\r\n/**\r\n *\r\n * @param argWrap commonly arrLogText[ 0 ]\r\n * @param verificationNumber\r\n * @returns {*} String\r\n */\r\nexport const argumentOfWrap =  (argWrap, verificationNumber ) => argWrap !== undefined && isNaN( argWrap) ? argWrap : toDisplayText( verificationNumber );\r\n\r\n\r\n/**\r\n * Анализирует последнюю ячейку массива лога, если кол-во ячеек нечетное,\r\n * то в последней ячейке содержится либо число, либо \"обернутое\" выражение,\r\n * тогда она извлекается из массива, оборачивается в требуемое выражение\r\n * и затем включается в последовательность лога. Иначе, если последняя часть\r\n * массива лога - оператор ( +, -... ), в последовательность лога включается\r\n * сообщенный второй аргумент, чаще всего это число из переменной firstNumber или\r\n * lastNumber\r\n *\r\n * @param arrLog\r\n * @param nm\r\n * @param wrapText\r\n */\r\nexport const updateArrLogText = ( arrLog, nm, wrapText )=>{\r\n\r\n    let firstArgument = '';\r\n    let secondArgument = '';\r\n\r\n    if( arrLog.length > 1 && arrLog.length%2 ){\r\n        firstArgument = arrLog.slice( 0, -1 );\r\n        secondArgument = wrapperArg( arrLog.pop(), wrapText );\r\n    } else {\r\n        firstArgument = arrLog;\r\n        secondArgument = wrapperArg( toDisplayText( nm ), wrapText );\r\n    }\r\n\r\n    return getArrLogText( firstArgument, secondArgument );\r\n\r\n};\r\n\r\n\r\n/**\r\n *\r\n * @param typeOperation\r\n * @returns {{cOperation: (function(*): number), wrapText: string}}\r\n */\r\nexport const getComplexesAttributes = (typeOperation )=>{\r\n    let attributes = {};\r\n\r\n    switch ( typeOperation ) {\r\n        case COMPLEXES_DIVISION_X:\r\n            attributes = { cOperation: ( val )=> 1/val, wrapText: '1/' };\r\n            break;\r\n        case COMPLEXES_SQR_X:\r\n            attributes = { cOperation: ( val )=> Math.pow( val, 2 ), wrapText: 'sqr' };\r\n            break;\r\n        case COMPLEXES_SQRT_X:\r\n            attributes = { cOperation: ( val )=> Math.sqrt( val ), wrapText: '√' };\r\n            break;\r\n        default:\r\n            throw Error( 'Unknown value received');\r\n    }\r\n\r\n    return attributes;\r\n\r\n\r\n};\r\n\r\n","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, toDisplayText, toFloat, updateArrLogText, wrapperArg} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                })=>{\r\n\r\n    onDot = false;\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n        /// если в первой ячейке массива лога содержится выражение, напр 1/(10)\r\n        if( arrLogText[ 0 ] !== undefined && isNaN( arrLogText[ 0 ] ) ){\r\n            arrLogText = getArrLogText( wrapperArg( arrLogText[ 0 ], 'negate' ) );\r\n        }\r\n        firstNumber *= -1;\r\n        displayText = toDisplayText( firstNumber );\r\n        //percentNumber = firstNumber;\r\n        //arrLogText = [];\r\n    } else if( mode === MODES.FIRST_OPERATOR ) {\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n        lastNumber = firstNumber * -1;\r\n        arrLogText = getArrLogText(  firstNumber, firstOperator, wrapperArg( displayText, 'negate' ) );\r\n        displayText = toDisplayText( lastNumber );\r\n    } else if( mode === MODES.MULTIPLE_ACTION ) {\r\n        lastNumber = toFloat( displayText ) * -1;\r\n        arrLogText = updateArrLogText( arrLogText, displayText, 'negate');\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = toFloat( displayText ) * -1;\r\n\r\n        const expression = arrLogText.length > 1 ? displayText : arrLogText[ 0 ];\r\n        arrLogText = getArrLogText( ` ${ wrapperArg( expression, 'negate' ) } ` );\r\n        displayText = toDisplayText( firstNumber );\r\n    } else if( mode === MODES.LAST_NUMBER ) {\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, 'negate');\r\n        lastNumber *= -1;\r\n        displayText = toDisplayText( lastNumber );\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES, NOT_OPERATOR, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getOutput, toDisplayText, toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = value;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        arrLogText = store.arrLogText;\r\n        displayText = getOutput( '', value, onDot );\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR  ){\r\n        displayText = getOutput( lastNumber.toString(), value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.MULTIPLE_ACTION ){\r\n\r\n        // Нам нужно установить является ли число которое мы хотим поправить\r\n        // \"обернутым\", но мы не знаем что хранится в последней ячейке массива\r\n        // лога, ранее введенные цифры или знак арифм. действия ( если число только\r\n        // начало формироваться), зная, что операторы всегда хранятся в четных ячейках\r\n        // проверяем является ли последняя ячейка нечетной, если да - там хранится число\r\n        // которое можно проверять на \"обернутость\"\r\n        if( arrLogText.length%2 && isNaN( toFloat(  arrLogText[ arrLogText.length - 1] )) ){\r\n            ///FIXME: Не уверен, что правильно работает с \"обернутыми\" числами, надо проверить!\r\n            lastNumber = value;\r\n            displayText =lastNumber.toString();\r\n            arrLogText = getArrLogText( arrLogText.slice( 0, -1 ) );\r\n        } else {\r\n            displayText = getOutput( lastNumber.toString(), value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.LAST_NUMBER ){\r\n        displayText = getOutput( displayText, value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n    } else {\r\n        if( firstOperator === SIMPLE_RESULT ){\r\n            firstNumber = value;\r\n            displayText = toDisplayText( firstNumber );\r\n            firstOperator = NOT_OPERATOR;\r\n\r\n        } else {\r\n            displayText = getOutput( displayText, value, onDot );\r\n            firstNumber = toFloat( displayText );\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    ///FIXME: Везде отменить onDOT = false, флаг должен обнуляться только в местах изменения числа\r\n    onDot = false;\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        displayText = store.displayText;\r\n        firstNumber = store.firstNumber;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n        percentNumber = store.percentNumber;\r\n\r\n    }\r\n\r\n    if( !displayText.includes( \",\" ) ){\r\n        onDot = true;\r\n        displayText = `${ displayText },`;\r\n    }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {argumentOfWrap, getArrLogText, getResult, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n        onDot = false;\r\n        if( mode < MODES.MULTIPLE_ACTION  ){\r\n            displayText = toDisplayText( firstNumber );\r\n\r\n                let firstPart = '';\r\n                /// если попеременно нажимаются разные операторы\r\n                if( mode === MODES.FIRST_OPERATOR && arrLogText.length ){\r\n                    firstPart = arrLogText.slice( 0, -1 ) ;\r\n                } else {\r\n                    // если первый аргумент есть и он обернут выражение\r\n                    firstPart = argumentOfWrap( arrLogText[ 0 ], firstNumber );\r\n\r\n                }\r\n\r\n            arrLogText = getArrLogText( firstPart\r\n                , value );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        } else if(   mode === MODES.AFTER_RESULT ){\r\n            /// когда после получения результата был нажат backspace лог удаляется\r\n            const selectedNumber = arrLogText.length ? argumentOfWrap( arrLogText[ 0 ], firstNumber ) : firstNumber;\r\n            arrLogText = getArrLogText( selectedNumber\r\n                , value );\r\n\r\n            mode = MODES.FIRST_OPERATOR;\r\n        } else if(  mode !== MODES.MULTIPLE_ACTION ){\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            firstNumber = toFloat( displayText );\r\n\r\n            if( mode === MODES.LAST_NUMBER ){\r\n                /// в последовательности, например, 4, +, %, + сложится массив [ 4, +, 0,16, 0,16 ]\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                }\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, value);\r\n                mode = MODES.MULTIPLE_ACTION;\r\n            } else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , firstNumber\r\n                    , value\r\n                    , lastNumber\r\n                    , value );\r\n\r\n                mode = MODES.FIRST_OPERATOR;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        lastNumber = 0;\r\n        percentNumber = firstNumber;\r\n        firstOperator = value;\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES, SIMPLE_DIVISION, SIMPLE_RESULT} from \"../../constants\";\r\nimport {getArrLogText, getResult, argumentOfWrap, toFloat, toDisplayText, getSimpleOperator} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , divisionByZeroBlocking\r\n                })=>{\r\n\r\n\r\n        if( mode > MODES.FIRST_OPERATOR && firstOperator !== SIMPLE_RESULT ){\r\n\r\n            if( ( !lastNumber && mode < MODES.LAST_NUMBER ) || mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = toFloat( displayText );\r\n                mode = MODES.LAST_NUMBER;\r\n            }\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n\r\n            if( mode === MODES.AFTER_RESULT ){\r\n                     arrLogText = getArrLogText(  firstNumber\r\n                    , firstOperator\r\n                    , lastNumber\r\n                    , SIMPLE_RESULT );\r\n\r\n                firstNumber = toFloat( displayText );\r\n                percentNumber = firstNumber;\r\n                /// если произведено деление на ноль\r\n            } else if( mode === MODES.LAST_NUMBER\r\n                && firstOperator === SIMPLE_DIVISION\r\n                && lastNumber === 0 ){\r\n\r\n                displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n                divisionByZeroBlocking = true;\r\n            } else {\r\n                /// если после получения результата был нажат оператор процентов,\r\n                // то лог будет иметь иметь не \"стандартный\" вид,\r\n                // кол-во его ячеек будет нечетным т.к. в последней будет храниться число\r\n                let firstArgument = arrLogText;\r\n                let secondArgument = lastNumber;\r\n                if( arrLogText.length > 1 && arrLogText.length%2 ){\r\n                    firstArgument = arrLogText.slice( 0, -1 );\r\n                    secondArgument = argumentOfWrap( arrLogText[ arrLogText.length - 1 ], lastNumber );\r\n                } else if( arrLogText.length === 1 ){\r\n                    firstArgument = [ arrLogText[ 0 ], getSimpleOperator( firstOperator )];\r\n                    secondArgument = toDisplayText( lastNumber );\r\n                }\r\n\r\n                arrLogText = getArrLogText( firstArgument, secondArgument, SIMPLE_RESULT);\r\n\r\n                firstNumber = toFloat( displayText );\r\n                mode = MODES.AFTER_RESULT;\r\n                percentNumber = firstNumber;\r\n            }\r\n\r\n\r\n\r\n        } else if( mode === MODES.FIRST_OPERATOR ) {\r\n            lastNumber = toFloat( displayText );\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            arrLogText = getArrLogText( argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , firstOperator\r\n                , lastNumber\r\n                , SIMPLE_RESULT );\r\n            firstNumber = toFloat( displayText );\r\n            mode = MODES.AFTER_RESULT;\r\n            percentNumber = firstNumber;\r\n        } else {\r\n            firstOperator = SIMPLE_RESULT;\r\n            arrLogText = getArrLogText( firstNumber, firstNumber === 0 ? '' : SIMPLE_RESULT );\r\n            percentNumber = firstNumber;\r\n        }\r\n\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n        , divisionByZeroBlocking\r\n    };\r\n\r\n}","import {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, MODES} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    switch ( value ) {\r\n\r\n        case MAIN_CLEAR:\r\n            displayText = store.displayText;\r\n            firstNumber = store.firstNumber;\r\n            lastNumber = store.lastNumber;\r\n            mode = store.mode;\r\n            firstOperator = store.firstOperator;\r\n            arrLogText = store.arrLogText;\r\n            percentNumber = store.percentNumber;\r\n\r\n            break;\r\n\r\n        case MAIN_CLEAR_LAST:\r\n\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = store.firstNumber;\r\n                lastNumber = store.lastNumber;\r\n                mode = store.mode;\r\n                firstOperator = store.firstOperator;\r\n                arrLogText = store.arrLogText;\r\n                percentNumber = store.percentNumber;\r\n            }\r\n            else{\r\n                lastNumber = store.lastNumber;\r\n            }\r\n\r\n            displayText = store.displayText;\r\n\r\n            break;\r\n        case MAIN_BACKSPACE:\r\n            if( displayText !== \"0\" ){\r\n                if( mode < MODES.AFTER_RESULT ){\r\n                    displayText = displayText.slice( 0, -1 ) || \"0\";\r\n\r\n                    if( mode < MODES.LAST_NUMBER )\r\n                    {\r\n                        firstNumber = toFloat( displayText );\r\n                    }\r\n                    else\r\n                        lastNumber =  toFloat( displayText );\r\n                }else {\r\n                    firstNumber = toFloat( displayText );\r\n                    arrLogText = [];\r\n                }\r\n            }\r\n            break;\r\n\r\n        default:\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nimport {COMPLEXES_DIVISION_X, DIVISION_BY_ZERO_IS_NOT_POSSIBLE, MODES} from \"../../constants\";\r\nimport {\r\n    getArrLogText,\r\n    argumentOfWrap,\r\n    toDisplayText,\r\n    wrapperArg,\r\n    updateArrLogText,\r\n    toFloat,\r\n    getComplexesAttributes\r\n} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                    , divisionByZeroBlocking\r\n                }, { type, value /*action*/})=>{\r\n\r\n    const { cOperation, wrapText } = getComplexesAttributes( value );\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText(\r\n            wrapperArg(\r\n                argumentOfWrap( arrLogText[ 0 ], firstNumber )\r\n                , wrapText)\r\n        );\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR ){\r\n\r\n        arrLogText = getArrLogText( arrLogText, wrapperArg( firstNumber,wrapText));\r\n\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            mode = MODES.LAST_NUMBER;\r\n        }\r\n\r\n    } else if( mode === MODES.LAST_NUMBER ){\r\n        arrLogText = updateArrLogText( arrLogText, lastNumber, wrapText);\r\n        if( lastNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n    } else if( mode === MODES.MULTIPLE_ACTION ){\r\n        arrLogText = updateArrLogText( arrLogText, displayText, wrapText);\r\n\r\n        if( toFloat( displayText ) === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            lastNumber = cOperation( toFloat( displayText ) );\r\n            displayText = toDisplayText( lastNumber );\r\n        }\r\n\r\n\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n\r\n        arrLogText = arrLogText.length > 1 ? [ wrapperArg( firstNumber, wrapText) ]\r\n                                           : [ wrapperArg( arrLogText[ 0 ],wrapText) ];\r\n        if( firstNumber === 0 ){\r\n            displayText = DIVISION_BY_ZERO_IS_NOT_POSSIBLE;\r\n            divisionByZeroBlocking = true;\r\n        } else {\r\n            firstNumber = cOperation( firstNumber );\r\n            displayText = toDisplayText( firstNumber );\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n        , divisionByZeroBlocking\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, roundNum, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                })=>{\r\n\r\n        onDot = false;\r\n\r\n        if( mode === MODES.BEGIN_MODE ){\r\n            firstNumber = 0;\r\n            displayText = toDisplayText( firstNumber );\r\n            arrLogText = getArrLogText( firstNumber );\r\n        } else if ( mode === MODES.FIRST_OPERATOR ){\r\n            lastNumber = roundNum( firstNumber * ( percentNumber / 100 ) );\r\n            mode = MODES.LAST_NUMBER;\r\n            arrLogText = getArrLogText( arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            percentNumber = firstNumber;\r\n        } else if ( mode === MODES.LAST_NUMBER ){\r\n            lastNumber = roundNum( lastNumber * ( percentNumber / 100 ) );\r\n\r\n            // если и последующие нажатие на кнопку проценты, значит вторая цифра уже выведена в лог\r\n            // ее надо заменить, если первое то лог заканчивается еще пока последним оператором\r\n            arrLogText = getArrLogText( arrLogText.length%2 ? arrLogText.slice( 0, -1 ) : arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n        } else if ( mode === MODES.AFTER_RESULT ){\r\n            displayText = toDisplayText( roundNum( toFloat( displayText ) * ( percentNumber / 100 ) ) );\r\n            firstNumber = toFloat( displayText );\r\n            arrLogText = getArrLogText( displayText );\r\n            //lastNumber = 0;\r\n        }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","// import { combineReducers } from 'redux';\r\n// import setNumber from \"./setNumber\";\r\nimport {\r\n    MODES,\r\n    NOT_OPERATOR,\r\n    ON_CLICK_COMPLEXES,\r\n    ON_CLICK_DOT,\r\n    ON_CLICK_MAIN,\r\n    ON_CLICK_NUMBER,\r\n    ON_CLICK_PERCENT,\r\n    ON_CLICK_RESULT,\r\n    ON_CLICK_SIGN,\r\n    ON_CLICK_SIMPLE_OPERATOR\r\n} from \"../constants\";\r\nimport servantOnSign from \"./servants/servantOnSign\";\r\nimport servantClickNumber from \"./servants/servantClickNumber\";\r\nimport servantOnDot from \"./servants/servantOnDot\";\r\nimport servantSimpleOperator from \"./servants/servantSimpleOperator\";\r\nimport servantResult from \"./servants/servantResult\";\r\nimport servantMain from \"./servants/servantMain\";\r\nimport servantComplexes from \"./servants/servantComplexes\";\r\nimport servantPercentOperator from \"./servants/servantPercentOperator\";\r\n\r\n// export default combineReducers({ setNumber });\r\n\r\nexport const store = {\r\n     displayText: \"0\"\r\n    , firstNumber: 0\r\n    , lastNumber: 0\r\n    , mode: MODES.BEGIN_MODE\r\n    , firstOperator: NOT_OPERATOR\r\n    , onDot: false\r\n    , percentNumber: NaN\r\n    , divisionByZeroBlocking: false\r\n    , arrLogText: []\r\n\r\n};\r\n\r\nexport default function reducer ( state = store, action ) {\r\n\r\n    if ( state.divisionByZeroBlocking ) state = { ...store };\r\n\r\n    // значение divisionByZeroBlocking устанавливается только в servantResult, по нему\r\n    // ориентируются только веб элементы меняя состояние disabled, нажатие любой активной\r\n    // кнопки меняет состояние divisionByZeroBlocking на false, никакие servant'ы, кроме\r\n    // servantResult, не используют его значение, поэтому в них не передается\r\n    state.divisionByZeroBlocking = false;\r\n\r\n    switch ( action.type ) {\r\n        case ON_CLICK_RESULT:\r\n            state = servantResult( state );\r\n            break;\r\n        case ON_CLICK_MAIN:\r\n            state = servantMain( state, action );\r\n            break;\r\n        case ON_CLICK_DOT:\r\n            state = servantOnDot( state, action );\r\n            break;\r\n        case ON_CLICK_SIGN:\r\n            state = servantOnSign( state );\r\n           break;\r\n        case ON_CLICK_NUMBER:\r\n            state = servantClickNumber( state, action );\r\n            break;\r\n        case ON_CLICK_SIMPLE_OPERATOR:\r\n            state = servantSimpleOperator( state, action );\r\n            break;\r\n        case ON_CLICK_COMPLEXES:\r\n            state = servantComplexes( state, action );\r\n            break;\r\n        case ON_CLICK_PERCENT:\r\n            state = servantPercentOperator( state );\r\n            break;\r\n        default:\r\n\r\n    }\r\n    ///TODO: Перегнать графику в свг\r\n    ///TODO: Заменить инклюдес\r\n    ///TODO: Деление на нуль. Добавить текст: Деление на ноль невозможно\r\n    ///TODO: Оригинальный калькулятор имеет бОльшую высоту\r\n    ///TODO: Реализовать поведение панели при использовании \"сложных операторов\" как на 2020-10-10_14-57-46 ( в папке doc )\r\n    ///FIXME: Кнопки сложных операторов, а также кнопка +/-  и кнопки простых операторов неправильно обрабатывают дизейбл\r\n\r\n    /////////////////////////////CONSOLE/////////////////////////////////////\r\n        ///TODO: Console log in the code \"INDEX_JS\" line 32\r\n        if( true ){\r\n            console.group( 'Console log in the code \"INDEX_JS\" line 32' );\r\n            //console.debug( 'state: ', state );\r\n            //console.debug( '( !buffer%1 ): ', ( !( buffer%1 ) ) );\r\n            console.table( state );\r\n            console.table( action );\r\n            //console.debug( 'this: ', this );\r\n            console.groupEnd();\r\n        }\r\n    /////////////////////////////END CONSOLE/////////////////////////////////\r\n\r\n    ///TODO: исправил поведение кнопок дисаблед\r\n\r\n    return  state;\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from \"./reducers/index\";\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {createStore} from 'redux';\r\n\r\n/**\r\n * Логирует все экшены и состояния после того, как они будут отправлены.\r\n */\r\n/*\r\nconst logger = store => next => action => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n\r\n    const act = { type: \"onClickNumber\", value: \"1\" };\r\n    let res = next( act );\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd(action.type);\r\n    return result;\r\n};\r\n\r\n\r\nconst store = createStore( reducer, composeWithDevTools( applyMiddleware( logger ) ) );\r\n*/\r\nconst store = createStore( reducer,\r\n                        window.__REDUX_DEVTOOLS_EXTENSION__\r\n                                && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nReactDOM.render(\r\n    <Provider store={ store  } >\r\n          <React.StrictMode>\r\n            <App />\r\n          </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}