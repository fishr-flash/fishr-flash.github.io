{"version":3,"sources":["calculator/Header.js","calculator/Output.js","constants.js","calculator/input_btns/NumsBoard.js","calculator/input_btns/SimpleOperators.js","calculator/input_btns/BtnResult.js","calculator/input_btns/BtnPercent.js","calculator/input_btns/MainBtns.js","calculator/input_btns/MemoryBtns.js","calculator/input_btns/ComplexesBtns.js","calculator/Input.js","App.js","serviceWorker.js","reducers/utils.js","reducers/servants/servantOnSign.js","reducers/servants/servantClickNumber.js","reducers/servants/servantOnDot.js","reducers/servants/servantSimpleOperator.js","reducers/servants/servantResult.js","reducers/servants/servantMain.js","reducers/servants/servantComplexes.js","reducers/servants/servantPercentOperator.js","reducers/index.js","index.js"],"names":["Header","className","id","disabled","connect","state","displayText","logText","arrLogText","join","props","parts","split","onMinus","parseInt","slice","len","length","abs","i","invert","reverse","trim","formatDisplayText","MODES","dispatch","clickNumber","v","type","value","clickSymbol","arg","onClick","MemoryBtns","Input","App","role","Boolean","window","location","hostname","match","getArrLogText","args","arr","flatDeep","map","toDisplayText","getSimpleOperator","filter","toFloat","roundNum","parseFloat","replace","nm","toString","operator","o","getResult","firstNumber","lastNumber","firstOperator","result","toFixed","getOutput","base","dot","includes","wrapperArg","log","wrapText","d","Infinity","reduce","acc","val","concat","Array","isArray","selectNumber","quantityOfStrFormat","isNaN","Math","mode","onDot","percentNumber","pop","store","NaN","createStore","action","servantResult","servantMain","servantOnDot","servantOnSign","servantClickNumber","servantSimpleOperator","servantComplexes","servantPercentOperator","console","group","table","groupEnd","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db24d48a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header(){\r\n    return (\r\n        <header>\r\n            <div className=\"full_width\" id=\"control_panel\">\r\n                <h1 className=\"label_ctrl_panel\">Калькулятор</h1>\r\n                <fieldset id=\"field_controls\">\r\n                    <button className=\"main_controls min_btn\" disabled={true}/>\r\n                    <button className=\"main_controls max_btn\" disabled={true}/>\r\n                    <button className=\"main_controls close_btn\" disabled={true}/>\r\n                </fieldset>\r\n            </div>\r\n            <div className=\"full_width\" id=\"dashboard\">\r\n                <button className=\"subtitle_controls menu_btn\" disabled={true}/>\r\n                <h2 className=\"subitile_ordinary\">Обычный</h2>\r\n                <button className=\"subtitle_controls stick_btn\" disabled={true}/>\r\n                <button className=\"subtitle_controls journal_btn\" disabled={true}/>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nfunction Output( props ) {\r\n\r\n    const formatDisplayText = ( displayText )=>{\r\n\r\n        const parts = displayText.split( ',');\r\n        let onMinus = false;\r\n\r\n        if( parseInt( parts[ 0 ] ) < 0 ){\r\n            onMinus = true;\r\n            parts[ 0 ] = parts[ 0 ].slice( 1 );\r\n        }\r\n\r\n\r\n        const len = parts[ 0 ].length;\r\n        let abs = \"\";\r\n\r\n        for (let i = len -1; i >= 0; i--) {\r\n            abs += ( len - i )%3?parts[ 0 ][ i ]: `${ parts[ 0 ][ i ] } `;\r\n        }\r\n\r\n        const invert = abs.split('').reverse();\r\n        parts[ 0 ] = invert.join('').trim();\r\n\r\n        return `${ onMinus? \"-\": ''}${parts.join(\",\")}`;\r\n    };\r\n\r\n    return(\r\n        <section className=\"full_width\">\r\n            <div className=\"full_width story_calc\">\r\n                <button className=\"progress_arrows left_progress_arrow\"/>\r\n                <p className=\"progress_content\">{ props.logText }</p>\r\n                <button className=\"progress_arrows right_progress_arrow\" />\r\n            </div>\r\n            <div className=\"full_width viewer_panel\" id=\"viewer\">\r\n                <blockquote>\r\n                    <p className=\"viewport\">{formatDisplayText( props.displayText )}</p>\r\n                </blockquote>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default connect(\r\n    \r\n    state => {\r\n        return ({\r\n                displayText: state.displayText\r\n                , logText: state.arrLogText.join( ' ' )\r\n\r\n        });\r\n    }, null\r\n)( Output );","/// action names\r\nexport const ON_CLICK_NUMBER = \"onClickNumber\";\r\nexport const ON_CLICK_DOT = \"onClickDot\";\r\nexport const ON_CLICK_SIGN = \"onClickSign\";\r\nexport const ON_CLICK_SIMPLE_OPERATOR = \"onClickSimpleOperator\";\r\nexport const ON_CLICK_RESULT = \"onClickResult\";\r\nexport const ON_CLICK_MAIN = \"onClickMain\";\r\nexport const ON_CLICK_COMPLEXES = \"onClickComplexes\";\r\nexport const ON_CLICK_PERCENT = \"onClickPercent\";\r\n\r\n\r\n/// simple operators\r\nexport const SIMPLE_MINUS = \"simpleMinus\";\r\nexport const SIMPLE_PLUS = \"simplePlus\";\r\nexport const SIMPLE_MULTIPLY = \"simpleMultiply\";\r\nexport const SIMPLE_DIVISION = \"simpleDivision\";\r\nexport const SIMPLE_RESULT = \"simpleResult\";\r\n\r\n/// default value of the firstOperator var\r\nexport const NOT_OPERATOR = \"notOperator\";\r\n\r\n\r\n\r\n/// main operators\r\nexport const MAIN_BACKSPACE = \"mainBackspace\";\r\nexport const MAIN_CLEAR = \"mainClear\";\r\nexport const MAIN_CLEAR_LAST = \"mainClearLast\";\r\n\r\n/// complexes operators\r\nexport const COMPLEXES_DIVISION_X = \"complexesDevisionX\";\r\n\r\n\r\n\r\n/// modes set\r\n\r\nexport const MODES = {\r\n    BEGIN_MODE: 0\r\n    , FIRST_OPERATOR: 1\r\n    , MULTIPLE_ACTION: 2\r\n    , LAST_NUMBER: 3\r\n    , AFTER_RESULT: 4\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_DOT, ON_CLICK_NUMBER, ON_CLICK_SIGN} from \"../../constants\";\r\n\r\nconst NumsBoard = ( props ) => {\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_num_btns\">\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 7 )}>7</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 8 )}>8</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 9 )}>9</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 4 )}>4</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 5 )}>5</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 6 )}>6</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 1 )}>1</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 2 )}>2</button>\r\n            <button className=\"input_btns nmr_btns\" onClick={ () => props.clickNumber( 3 )}>3</button>\r\n            <button className=\"input_btns nmr_btns btn_plus_minus\" onClick={ () => props.clickSymbol( )}/>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_zerro\" onClick={ () => props.clickNumber( 0 )}>0</button>\r\n            <button className=\"input_btns nmr_btns\" id=\"btn_dote\" onClick={ () => props.clickSymbol( \".\" )}>,</button>\r\n        </fieldset>\r\n    );\r\n\r\n}\r\n\r\nexport default connect(\r\n   null,\r\n    dispatch => ({\r\n        clickNumber: ( v ) => {\r\n            dispatch( {type: ON_CLICK_NUMBER, value: v })\r\n        }\r\n        , clickSymbol: ( arg ) => {\r\n            arg ? dispatch( {type: ON_CLICK_DOT })\r\n                : dispatch( {type: ON_CLICK_SIGN })\r\n        }\r\n    })\r\n)( NumsBoard );","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ON_CLICK_SIMPLE_OPERATOR, SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS} from \"../../constants\";\r\n\r\nconst SimpleOperators = ( props )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_simple_btns\">\r\n            <button className=\"input_btns btn_division\" onClick={ () => props.onClick( SIMPLE_DIVISION )} />\r\n            <button className=\"input_btns btn_multiply\" onClick={ () => props.onClick( SIMPLE_MULTIPLY )} />\r\n            <button className=\"input_btns btn_minus\" onClick={ () => props.onClick( SIMPLE_MINUS )} />\r\n            <button className=\"input_btns btn_plus\" onClick={ () => props.onClick( SIMPLE_PLUS )} />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_SIMPLE_OPERATOR, value: v })\r\n        }\r\n    })\r\n)( SimpleOperators);","import {ON_CLICK_RESULT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnResult = ( props )=>{\r\n\r\n    return(\r\n        < fieldset >\r\n            <button className=\"input_btns btn_result\" onClick={ () => props.onClick( )} />\r\n        </fieldset>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( ) => {\r\n            dispatch( {type: ON_CLICK_RESULT })\r\n        }\r\n    })\r\n)( BtnResult);","import {ON_CLICK_PERCENT} from \"../../constants\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst BtnPercent = ( props )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_percent\">\r\n            <button className=\"input_btns btn_percent\" onClick={ () => props.onClick( ) } >%</button>\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_PERCENT, value: null })\r\n        }\r\n    })\r\n)( BtnPercent);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, ON_CLICK_MAIN} from \"../../constants\";\r\n\r\nconst MainBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"main_btns\">\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR_LAST ) }>CE</button>\r\n            <button className=\"input_btns\" onClick={ () => props.onClick( MAIN_CLEAR ) } >C</button>\r\n            <button className=\"input_btns btn_backspace\"  onClick={ () => props.onClick( MAIN_BACKSPACE ) } />\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_MAIN, value: v })\r\n        }\r\n    })\r\n)( MainBtns);","import React from \"react\";\r\n\r\nconst MemoryBtns = ( props ) =>{\r\n\r\n    return(\r\n        <fieldset className=\"input_fieldsets\">\r\n            <button className=\"mm_btns\" disabled={ true }>MC</button>\r\n            <button className=\"mm_btns\" disabled={ true }>MR</button>\r\n            <button className=\"mm_btns\" disabled={ true }>M+</button>\r\n            <button className=\"mm_btns\" disabled={ true }>M-</button>\r\n            <button className=\"mm_btns\" disabled={ true }>MS</button>\r\n            <button className=\"mm_btns\" disabled={ true }>M<sup className=\"down_arrow\">▼</sup></button>\r\n        </fieldset>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default MemoryBtns;\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {COMPLEXES_DIVISION_X, ON_CLICK_COMPLEXES} from \"../../constants\";\r\n\r\nconst ComplexesBtns = ( props )=>{\r\n\r\n    return(\r\n        <fieldset className=\"fieldset_complexes_btns\" disabled={ true }>\r\n            <button className=\"input_btns btn_one_x\" onClick={ () => props.onClick( COMPLEXES_DIVISION_X )} />\r\n            <button className=\"input_btns btn_x2\" disabled={ true } />\r\n            <button className=\"input_btns btn_2x\" disabled={ true } />\r\n        </fieldset>\r\n    );\r\n};\r\n\r\n\r\nexport default connect(\r\n    null,\r\n    dispatch => ({\r\n        onClick: ( v ) => {\r\n            dispatch( {type: ON_CLICK_COMPLEXES, value: v })\r\n        }\r\n    })\r\n)( ComplexesBtns);","import React from \"react\";\r\nimport NumsBoard from \"./input_btns/NumsBoard\";\r\nimport SimpleOperators from \"./input_btns/SimpleOperators\";\r\nimport BtnResult from \"./input_btns/BtnResult\";\r\nimport BtnPercent from \"./input_btns/BtnPercent\";\r\nimport MainBtns from \"./input_btns/MainBtns\";\r\nimport MemoryBtns from \"./input_btns/MemoryBtns\";\r\nimport ComplexesBtns from \"./input_btns/ComplexesBtns\";\r\n\r\nconst Input = () => {\r\n    return(\r\n        <section className=\"full_width input_section\" >\r\n            <MemoryBtns/>\r\n            <section className=\"input_fieldsets\">\r\n                <BtnPercent/>\r\n                <MainBtns />\r\n                <ComplexesBtns/>\r\n                <NumsBoard />\r\n                <SimpleOperators />\r\n                <BtnResult/>\r\n            </section>\r\n        </section>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Header from \"./calculator/Header\";\r\nimport Output from \"./calculator/Output\";\r\nimport Input from \"./calculator/Input\";\r\n\r\n///FIXME: need reconfigure package.json, this don't have flat() and includes()\r\nfunction App() {\r\n  return (\r\n            <main role=\"main\" className={\"App active\"}>\r\n                <Header />\r\n                <Output />\r\n                <Input />\r\n            </main>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {SIMPLE_DIVISION, SIMPLE_MINUS, SIMPLE_MULTIPLY, SIMPLE_PLUS, SIMPLE_RESULT} from \"../constants\";\r\n\r\nexport const getArrLogText = ( ...args ) =>{\r\n\r\n    let arr = flatDeep( args ).map( v => {\r\n        let res =\"\";\r\n        if( typeof v === \"number\" )\r\n            res = toDisplayText( v );\r\n        else\r\n            res = getSimpleOperator( v );\r\n        if( res ) return res;\r\n        return v;\r\n    });\r\n\r\n    return arr.filter( v => v !== \"\" );\r\n};\r\n\r\nexport const toFloat = (displayText )=> {\r\n    return roundNum( parseFloat(  displayText.replace( \",\", '.')) );\r\n};\r\n\r\nexport const toDisplayText = ( nm )=>{\r\n\r\n    return nm.toString().replace( \".\", \",\");\r\n};\r\nexport const getSimpleOperator = (operator )=>{\r\n\r\n    let o = '';\r\n    switch ( operator ) {\r\n        case SIMPLE_RESULT:\r\n            o = \"=\";\r\n            break;\r\n        case SIMPLE_PLUS:\r\n            o = \"+\";\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            o = \"-\";\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            o = \"×\";\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            o = \"÷\";\r\n            break;\r\n        default:\r\n            o = \"\";\r\n    }\r\n\r\n    return o;\r\n};\r\n\r\nexport const getResult = (  firstNumber, lastNumber, firstOperator ) =>{\r\n\r\n    let result = 0;\r\n    switch ( firstOperator ) {\r\n\r\n        case SIMPLE_PLUS:\r\n            result = roundNum( firstNumber + lastNumber );\r\n            break;\r\n\r\n        case SIMPLE_MINUS:\r\n            result = roundNum( firstNumber - lastNumber );\r\n            break;\r\n        case SIMPLE_MULTIPLY:\r\n            result = roundNum( firstNumber * lastNumber );\r\n            break;\r\n        case SIMPLE_DIVISION:\r\n            result = roundNum( firstNumber / lastNumber );\r\n            break;\r\n        default:\r\n    }\r\n\r\n    return result.toString().replace( \".\", \",\");\r\n};\r\n\r\nexport const roundNum = (nm )=>{\r\n    return nm.toFixed( 17 ) * 1 /* exclude excess zeros*/;\r\n};\r\n/**\r\n * Prepares a number for output in the main current number field\r\n *\r\n * @param base - perhaps the first part of the number ( before the separator )\r\n * @param arg - enter digit\r\n * @param dot - separator flag\r\n * @returns {string} the result is in string format\r\n */\r\nexport const getOutput = ( base, arg, dot = false ) =>{\r\n    if( base.includes( \",\" )  ) {\r\n        dot = false;\r\n    }\r\n    if( dot )\r\n        return  `${ base.toString() },${ arg }`;\r\n    else\r\n        return  base === '0' ? `${ arg}` : `${base}${arg}`;\r\n};\r\n\r\n\r\n/**\r\n *  Called when it is necessary to wrap a number in the text\r\n *  of the calculator log in any special text structure,\r\n *  such \"wrapping\" can be multiple\r\n *\r\n *  Вызывается при необходимости обернуть число в тексте лога\r\n *  калькулятора в какую либо специальную текстовую контструкцию,\r\n *  такое \"обертывание\" может быть множественным\r\n * @param nm\r\n * @param log\r\n * @param wrapText\r\n * @returns {string}\r\n */\r\nexport const wrapperArg = ( nm, log, wrapText ) =>{\r\n\r\n    let result = `${ nm }`;\r\n    if( log && log.includes( wrapText )){\r\n        result = `${wrapText}( ${ log } )`;\r\n    } else {\r\n        result = `${wrapText}( ${ nm } )`;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const flatDeep = ( arr, d = Infinity )=>{\r\n    return d > 0 ? arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flatDeep(val, d - 1) : val), [])\r\n        : arr.slice();\r\n};\r\n\r\n/**\r\n *\r\n *  analyzes the presence of a wrapped number\r\n *  and looks for a match with the firstNumber\r\n *\r\n * @param firstNumber\r\n * @param quantityOfStrFormat - arrLogText[ N ]\r\n * @returns String\r\n */\r\nexport const selectNumber = (firstNumber, quantityOfStrFormat ) =>{\r\n    if( isNaN( toFloat( quantityOfStrFormat ) )\r\n        && quantityOfStrFormat.includes( toDisplayText( Math.abs( firstNumber ) )))\r\n        return quantityOfStrFormat;\r\n\r\n    return toDisplayText( firstNumber );\r\n\r\n};\r\n\r\n\r\n\r\n\r\n","import {MODES} from \"../../constants\";\r\nimport {wrapperArg, getArrLogText, toDisplayText, toFloat } from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                })=>{\r\n\r\n    onDot = false;\r\n\r\n    if( mode < MODES.FIRST_OPERATOR ){\r\n        \r\n        firstNumber *= -1;\r\n        displayText = toDisplayText( firstNumber );\r\n        arrLogText = [];\r\n    } else if( mode === MODES.FIRST_OPERATOR ) {\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n        lastNumber = firstNumber * -1;\r\n        arrLogText = getArrLogText(  firstNumber, firstOperator, wrapperArg( displayText, arrLogText.pop(), 'negate' ) );\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n\r\n    } else if( mode === MODES.MULTIPLE_ACTION ) {\r\n        lastNumber = toFloat( displayText ) * -1;\r\n         arrLogText = getArrLogText(  arrLogText\r\n             ,  wrapperArg( displayText\r\n                 , arrLogText.length%2 ? arrLogText.pop() : '', 'negate' )  );\r\n\r\n        displayText = toDisplayText( lastNumber );\r\n\r\n    } else if( mode === MODES.AFTER_RESULT ){\r\n            firstNumber = toFloat( displayText ) * -1;\r\n            arrLogText = getArrLogText( ` ${ wrapperArg( displayText , arrLogText.pop(), 'negate' ) } ` );\r\n            displayText = toDisplayText( firstNumber );\r\n\r\n\r\n    } else if( mode === MODES.LAST_NUMBER ) {\r\n\r\n        lastNumber *= -1;\r\n        displayText = toDisplayText( lastNumber );\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, getOutput, toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        firstNumber = value;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        arrLogText = store.arrLogText;\r\n        displayText = getOutput( '', value, onDot );\r\n\r\n    } else if( mode === MODES.FIRST_OPERATOR  ){\r\n        displayText = getOutput( lastNumber.toString(), value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.MULTIPLE_ACTION ){\r\n\r\n        // Нам нужно установить является ли число которое мы хотим поправить\r\n        // \"обернутым\", но мы не знаем что хранится в последней ячейке массива\r\n        // лога, ранее введенные цифры или знак арифм. действия ( если число только\r\n        // начало формироваться), зная, что операторы всегда хранятся в четных ячейках\r\n        // проверяем является ли последняя ячейка нечетной, если да - там хранится число\r\n        // которое можно проверять на \"обернутость\"\r\n        if( arrLogText.length%2 && isNaN( toFloat(  arrLogText[ arrLogText.length - 1] )) ){\r\n            ///FIXME: Не уверен, что правильно работает с \"обернутыми\" числами, надо проверить!\r\n            lastNumber = value;\r\n            displayText =lastNumber.toString();\r\n            arrLogText = getArrLogText( arrLogText.slice( 0, -1 ) );\r\n        } else {\r\n            displayText = getOutput( lastNumber.toString(), value, onDot );\r\n            lastNumber = toFloat( displayText );\r\n        }\r\n\r\n        mode = MODES.LAST_NUMBER;\r\n\r\n    } else if ( mode === MODES.LAST_NUMBER ){\r\n        displayText = getOutput( displayText, value, onDot );\r\n        lastNumber = toFloat( displayText );\r\n    } else {\r\n        displayText = getOutput( displayText, value, onDot );\r\n        firstNumber = toFloat( displayText );\r\n    }\r\n\r\n    ///FIXME: Везде отменить onDOT = false, флаг должен обнуляться только в местах изменения числа\r\n    onDot = false;\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    if( mode === MODES.AFTER_RESULT ){\r\n        displayText = store.displayText;\r\n        firstNumber = store.firstNumber;\r\n        lastNumber = store.lastNumber;\r\n        mode = store.mode;\r\n        firstOperator = store.firstOperator;\r\n        onDot = store.onDot;\r\n        arrLogText = store.arrLogText;\r\n        percentNumber = store.percentNumber;\r\n\r\n    }\r\n\r\n    if( !displayText.includes( \",\" ) ){\r\n        onDot = true;\r\n        displayText = `${ displayText },`;\r\n    }\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {selectNumber, getArrLogText, getResult, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n        onDot = false;\r\n        if( mode === MODES.BEGIN_MODE\r\n            || mode === MODES.FIRST_OPERATOR ){\r\n            displayText = toDisplayText( firstNumber );\r\n            arrLogText = getArrLogText( arrLogText.length ? arrLogText : firstNumber\r\n                , value );\r\n            mode = MODES.FIRST_OPERATOR;\r\n            lastNumber = 0;\r\n        } else if(   mode === MODES.AFTER_RESULT ){\r\n            arrLogText = getArrLogText( selectNumber( firstNumber, arrLogText[ 0 ])\r\n                , value );\r\n            lastNumber = 0;\r\n            mode = MODES.FIRST_OPERATOR;\r\n        } else if(  mode !== MODES.MULTIPLE_ACTION ){\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n            firstNumber = toFloat( displayText );\r\n\r\n            if( mode === MODES.LAST_NUMBER ){\r\n\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , lastNumber\r\n                    , value);\r\n\r\n                mode = MODES.MULTIPLE_ACTION;\r\n            } else{\r\n                arrLogText = getArrLogText( arrLogText\r\n                    , firstNumber\r\n                    , value\r\n                    , lastNumber\r\n                    , value );\r\n\r\n                mode = MODES.FIRST_OPERATOR;\r\n            }\r\n\r\n            lastNumber = 0;\r\n        }\r\n\r\n        percentNumber = firstNumber;\r\n        firstOperator = value;\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES, SIMPLE_RESULT} from \"../../constants\";\r\nimport {selectNumber, getArrLogText, getResult, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                })=>{\r\n\r\n\r\n        onDot = false;\r\n\r\n        if( mode > MODES.FIRST_OPERATOR && firstOperator !== SIMPLE_RESULT ){\r\n\r\n            if( ( !lastNumber && mode < MODES.LAST_NUMBER ) || mode === MODES.MULTIPLE_ACTION ){\r\n                lastNumber = toFloat( displayText );\r\n                mode = MODES.LAST_NUMBER;\r\n            }\r\n            displayText = getResult( firstNumber, lastNumber, firstOperator );\r\n\r\n            if( mode === MODES.AFTER_RESULT ){\r\n\r\n                arrLogText = getArrLogText( selectNumber( firstNumber, arrLogText[ 0 ])\r\n                    , firstOperator\r\n                    , lastNumber\r\n                    , SIMPLE_RESULT );\r\n            }\r\n            else{\r\n                /// если после получения результата был нажат оператор процентов,\r\n                // то лог будет иметь иметь не \"стандартный\" вид,\r\n                // кол-во его ячеек будет нечетным т.к. в последней будет храниться число\r\n                arrLogText = getArrLogText( arrLogText.length%2 ? arrLogText.slice( 0, -1 ) : arrLogText\r\n                    , selectNumber( lastNumber, arrLogText[ arrLogText.length - 1 ])\r\n                    , SIMPLE_RESULT);\r\n            }\r\n\r\n            firstNumber = toFloat( displayText );\r\n            mode = MODES.AFTER_RESULT;\r\n\r\n        } else {\r\n\r\n            firstNumber = toFloat( displayText );\r\n            firstOperator = SIMPLE_RESULT;\r\n            arrLogText = getArrLogText( firstNumber, firstOperator );\r\n            mode = MODES.FIRST_OPERATOR;\r\n\r\n        }\r\n\r\n        percentNumber = firstNumber;\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MAIN_BACKSPACE, MAIN_CLEAR, MAIN_CLEAR_LAST, MODES} from \"../../constants\";\r\nimport {toFloat} from \"../utils\";\r\nimport {store} from \"../index\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n    switch ( value ) {\r\n\r\n        case MAIN_CLEAR:\r\n            displayText = store.displayText;\r\n            firstNumber = store.firstNumber;\r\n            lastNumber = store.lastNumber;\r\n            mode = store.mode;\r\n            firstOperator = store.firstOperator;\r\n            arrLogText = store.arrLogText;\r\n            percentNumber = store.percentNumber;\r\n\r\n            break;\r\n\r\n        case MAIN_CLEAR_LAST:\r\n\r\n            if( mode === MODES.BEGIN_MODE\r\n                || mode === MODES.AFTER_RESULT ){\r\n                firstNumber = store.firstNumber;\r\n                lastNumber = store.lastNumber;\r\n                mode = store.mode;\r\n                firstOperator = store.firstOperator;\r\n                arrLogText = store.arrLogText;\r\n                percentNumber = store.percentNumber;\r\n            }\r\n            else{\r\n                lastNumber = store.lastNumber;\r\n            }\r\n\r\n            displayText = store.displayText;\r\n\r\n            break;\r\n        case MAIN_BACKSPACE:\r\n            if( displayText !== \"0\" ){\r\n                if( mode < MODES.AFTER_RESULT ){\r\n                    displayText = displayText.slice( 0, -1 ) || \"0\";\r\n\r\n                    if( mode < MODES.LAST_NUMBER )\r\n                    {\r\n                        firstNumber = toFloat( displayText );\r\n                    }\r\n                    else\r\n                        lastNumber =  toFloat( displayText );\r\n                }else {\r\n                    firstNumber = toFloat( displayText );\r\n                    arrLogText = [];\r\n                }\r\n            }\r\n            break;\r\n\r\n        default:\r\n    }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","//const DIVISION_WARNING = 'Деление на ноль невозможно';\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                }, { type, value /*action*/})=>{\r\n\r\n\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","import {MODES} from \"../../constants\";\r\nimport {getArrLogText, roundNum, toDisplayText, toFloat} from \"../utils\";\r\n\r\nexport default ({displayText\r\n                    , firstNumber\r\n                    , lastNumber\r\n                    , mode\r\n                    , firstOperator\r\n                    , onDot\r\n                    , arrLogText\r\n                    , percentNumber\r\n                })=>{\r\n\r\n        onDot = false;\r\n\r\n        if( mode === MODES.BEGIN_MODE ){\r\n            firstNumber = 0;\r\n            displayText = toDisplayText( firstNumber );\r\n            arrLogText = getArrLogText( firstNumber );\r\n        } else if ( mode === MODES.FIRST_OPERATOR ){\r\n            lastNumber = roundNum( firstNumber * ( percentNumber / 100 ) );\r\n            mode = MODES.LAST_NUMBER;\r\n            arrLogText = getArrLogText( arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n            percentNumber = firstNumber;\r\n        } else if ( mode === MODES.LAST_NUMBER ){\r\n            lastNumber = roundNum( lastNumber * ( percentNumber / 100 ) );\r\n\r\n            // если и последующие нажатие на кнопку проценты, значит вторая цифра уже выведена в лог\r\n            // ее надо заменить, если первое то лог заканчивается еще пока последним оператором\r\n            arrLogText = getArrLogText( arrLogText.length%2 ? arrLogText.slice( 0, -1 ) : arrLogText, lastNumber );\r\n            displayText = toDisplayText( lastNumber );\r\n        } else if ( mode === MODES.AFTER_RESULT ){\r\n            displayText = toDisplayText( roundNum( toFloat( displayText ) * ( percentNumber / 100 ) ) );\r\n            firstNumber = toFloat( displayText );\r\n            arrLogText = getArrLogText( displayText );\r\n            //lastNumber = 0;\r\n        }\r\n\r\n    return{ displayText\r\n        , firstNumber\r\n        , lastNumber\r\n        , mode\r\n        , firstOperator\r\n        , onDot\r\n        , arrLogText\r\n        , percentNumber\r\n    };\r\n\r\n}","// import { combineReducers } from 'redux';\r\n// import setNumber from \"./setNumber\";\r\nimport {\r\n    MODES, NOT_OPERATOR, ON_CLICK_COMPLEXES,\r\n    ON_CLICK_DOT, ON_CLICK_MAIN,\r\n    ON_CLICK_NUMBER, ON_CLICK_PERCENT,\r\n    ON_CLICK_RESULT,\r\n    ON_CLICK_SIGN,\r\n    ON_CLICK_SIMPLE_OPERATOR\r\n} from \"../constants\";\r\nimport servantOnSign from \"./servants/servantOnSign\";\r\nimport servantClickNumber from \"./servants/servantClickNumber\";\r\nimport servantOnDot from \"./servants/servantOnDot\";\r\nimport servantSimpleOperator from \"./servants/servantSimpleOperator\";\r\nimport servantResult from \"./servants/servantResult\";\r\nimport servantMain from \"./servants/servantMain\";\r\nimport servantComplexes from \"./servants/servantComplexes\";\r\nimport servantPercentOperator from \"./servants/servantPercentOperator\";\r\n\r\n// export default combineReducers({ setNumber });\r\n\r\nexport const store = {\r\n     displayText: \"0\"\r\n    , firstNumber: 0\r\n    , lastNumber: 0\r\n    , mode: MODES.BEGIN_MODE\r\n    ///TODO: Для firstOperator дефолтным значением стоило бы сделать какое то специальное\r\n    , firstOperator: NOT_OPERATOR\r\n    , onDot: false\r\n    , percentNumber: NaN\r\n    , arrLogText: []\r\n\r\n};\r\n\r\nexport default function reducer ( state = store, action ) {\r\n\r\n    switch ( action.type ) {\r\n        case ON_CLICK_RESULT:\r\n            state = servantResult( state );\r\n            break;\r\n        case ON_CLICK_MAIN:\r\n            state = servantMain( state, action );\r\n            break;\r\n        case ON_CLICK_DOT:\r\n            state = servantOnDot( state, action );\r\n            break;\r\n        case ON_CLICK_SIGN:\r\n            state = servantOnSign( state );\r\n           break;\r\n        case ON_CLICK_NUMBER:\r\n            state = servantClickNumber( state, action );\r\n            break;\r\n        case ON_CLICK_SIMPLE_OPERATOR:\r\n            state = servantSimpleOperator( state, action );\r\n            break;\r\n        case ON_CLICK_COMPLEXES:\r\n            state = servantComplexes( state, action );\r\n            break;\r\n        case ON_CLICK_PERCENT:\r\n            state = servantPercentOperator( state );\r\n            break;\r\n        default:\r\n\r\n    }\r\n    ///TODO: Перегнать графику в свг\r\n    ///TODO: Заменить инклюдес\r\n    ///TODO: Деление на нуль. Добавить текст: Деление на ноль невозможно\r\n    ///TODO: Оригинальный калькулятор имеет бОльшую высоту\r\n    ///TODO: Реализовать поведение панели при использовании \"сложных операторов\" как на 2020-10-10_14-57-46 ( в папке doc )\r\n    /////////////////////////////CONSOLE/////////////////////////////////////\r\n        ///TODO: Console log in the code \"INDEX_JS\" line 32\r\n        if( true ){\r\n            console.group( 'Console log in the code \"INDEX_JS\" line 32' );\r\n            //console.debug( 'state: ', state );\r\n            //console.debug( '( !buffer%1 ): ', ( !( buffer%1 ) ) );\r\n            console.table( state );\r\n            console.table( action );\r\n            //console.debug( 'this: ', this );\r\n            console.groupEnd();\r\n        }\r\n    /////////////////////////////END CONSOLE/////////////////////////////////\r\n\r\n    return  state;\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport reducer from \"./reducers/index\";\r\n//import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport {createStore} from 'redux';\r\n\r\n/**\r\n * Логирует все экшены и состояния после того, как они будут отправлены.\r\n */\r\n/*\r\nconst logger = store => next => action => {\r\n    console.group(action.type);\r\n    console.info('dispatching', action);\r\n\r\n    const act = { type: \"onClickNumber\", value: \"1\" };\r\n    let res = next( act );\r\n    const result = next(action);\r\n    console.log('next state', store.getState());\r\n    console.groupEnd(action.type);\r\n    return result;\r\n};\r\n\r\n\r\nconst store = createStore( reducer, composeWithDevTools( applyMiddleware( logger ) ) );\r\n*/\r\nconst store = createStore( reducer,\r\n                        window.__REDUX_DEVTOOLS_EXTENSION__\r\n                                && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nReactDOM.render(\r\n    <Provider store={ store  } >\r\n          <React.StrictMode>\r\n            <App />\r\n          </React.StrictMode>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}